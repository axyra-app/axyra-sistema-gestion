// ========================================
// GESTOR DE SUSCRIPCIONES AXYRA
// ========================================
// Sistema completo para gestionar suscripciones, renovaciones y pagos

class AxyraSubscriptionManager {
    constructor() {
        this.currentUser = null;
        this.currentSubscription = null;
        this.init();
    }

    init() {
        console.log('üìã Inicializando gestor de suscripciones...');
        this.setupAuthListener();
        this.setupEventListeners();
        console.log('‚úÖ Gestor de suscripciones inicializado');
    }

    setupAuthListener() {
        if (window.firebase && window.firebase.auth) {
            window.firebase.auth().onAuthStateChanged(async (user) => {
                if (user) {
                    this.currentUser = user;
                    await this.loadUserSubscription();
                } else {
                    this.currentUser = null;
                    this.currentSubscription = null;
                }
            });
        }
    }

    setupEventListeners() {
        // Event listeners para gesti√≥n de suscripciones
        document.addEventListener('click', (e) => {
            if (e.target.matches('[data-subscription-action]')) {
                const action = e.target.dataset.subscriptionAction;
                const planId = e.target.dataset.plan;
                this.handleSubscriptionAction(action, planId);
            }
        });
    }

    async loadUserSubscription() {
        try {
            if (!this.currentUser) return;

            console.log('üìã Cargando suscripci√≥n del usuario...');
            
            const userDoc = await window.firebase.firestore()
                .collection('users')
                .doc(this.currentUser.uid)
                .get();

            if (userDoc.exists) {
                const userData = userDoc.data();
                this.currentSubscription = userData.membership || null;
                this.updateSubscriptionUI();
                console.log('‚úÖ Suscripci√≥n cargada:', this.currentSubscription);
            }
        } catch (error) {
            console.error('‚ùå Error cargando suscripci√≥n:', error);
        }
    }

    updateSubscriptionUI() {
        // Actualizar UI con informaci√≥n de la suscripci√≥n
        const subscriptionStatus = document.getElementById('subscriptionStatus');
        const subscriptionPlan = document.getElementById('subscriptionPlan');
        const subscriptionExpiry = document.getElementById('subscriptionExpiry');
        const renewalStatus = document.getElementById('renewalStatus');

        if (this.currentSubscription) {
            if (subscriptionStatus) {
                subscriptionStatus.textContent = this.getStatusText(this.currentSubscription.status);
                subscriptionStatus.className = `status-${this.currentSubscription.status}`;
            }

            if (subscriptionPlan) {
                subscriptionPlan.textContent = this.getPlanName(this.currentSubscription.plan);
            }

            if (subscriptionExpiry) {
                const expiryDate = this.currentSubscription.endDate?.toDate();
                subscriptionExpiry.textContent = expiryDate ? 
                    expiryDate.toLocaleDateString('es-CO') : 'No disponible';
            }

            if (renewalStatus) {
                renewalStatus.textContent = this.currentSubscription.autoRenewal ? 
                    'Renovaci√≥n autom√°tica activada' : 'Renovaci√≥n autom√°tica desactivada';
                renewalStatus.className = this.currentSubscription.autoRenewal ? 
                    'renewal-enabled' : 'renewal-disabled';
            }
        }
    }

    async handleSubscriptionAction(action, planId) {
        try {
            switch (action) {
                case 'upgrade':
                    await this.upgradeSubscription(planId);
                    break;
                case 'downgrade':
                    await this.downgradeSubscription(planId);
                    break;
                case 'cancel':
                    await this.cancelSubscription();
                    break;
                case 'renew':
                    await this.renewSubscription();
                    break;
                case 'toggle_auto_renewal':
                    await this.toggleAutoRenewal();
                    break;
                default:
                    console.warn('Acci√≥n de suscripci√≥n no reconocida:', action);
            }
        } catch (error) {
            console.error('‚ùå Error manejando acci√≥n de suscripci√≥n:', error);
            this.showError('Error procesando la acci√≥n. Intenta de nuevo.');
        }
    }

    async upgradeSubscription(newPlanId) {
        try {
            if (!this.currentUser) {
                this.showError('Debes iniciar sesi√≥n para actualizar tu suscripci√≥n');
                return;
            }

            console.log(`üìà Actualizando suscripci√≥n a: ${newPlanId}`);
            
            // Verificar si el plan es v√°lido
            const planDetails = this.getPlanDetails(newPlanId);
            if (!planDetails) {
                this.showError('Plan no v√°lido');
                return;
            }

            // Mostrar confirmaci√≥n
            const confirmed = await this.showConfirmation(
                'Actualizar Suscripci√≥n',
                `¬øEst√°s seguro de que quieres actualizar a ${planDetails.name}?`
            );

            if (!confirmed) return;

            // Procesar actualizaci√≥n
            if (window.axyraWompiIntegration) {
                await window.axyraWompiIntegration.initiatePayment(newPlanId);
            } else {
                this.showError('Sistema de pagos no disponible');
            }
        } catch (error) {
            console.error('‚ùå Error actualizando suscripci√≥n:', error);
            this.showError('Error actualizando la suscripci√≥n');
        }
    }

    async downgradeSubscription(newPlanId) {
        try {
            console.log(`üìâ Degradando suscripci√≥n a: ${newPlanId}`);
            
            const confirmed = await this.showConfirmation(
                'Degradar Suscripci√≥n',
                '¬øEst√°s seguro de que quieres degradar tu suscripci√≥n? Los cambios se aplicar√°n en el pr√≥ximo ciclo de facturaci√≥n.'
            );

            if (!confirmed) return;

            // Actualizar suscripci√≥n (se aplicar√° en el pr√≥ximo ciclo)
            await this.updateSubscriptionPlan(newPlanId, 'downgrade');
            this.showSuccess('Suscripci√≥n degradada. Los cambios se aplicar√°n en el pr√≥ximo ciclo.');
        } catch (error) {
            console.error('‚ùå Error degradando suscripci√≥n:', error);
            this.showError('Error degradando la suscripci√≥n');
        }
    }

    async cancelSubscription() {
        try {
            console.log('‚ùå Cancelando suscripci√≥n...');
            
            const confirmed = await this.showConfirmation(
                'Cancelar Suscripci√≥n',
                '¬øEst√°s seguro de que quieres cancelar tu suscripci√≥n? Perder√°s acceso a todas las funcionalidades premium.'
            );

            if (!confirmed) return;

            // Cancelar suscripci√≥n
            await this.updateSubscriptionStatus('cancelled');
            this.showSuccess('Suscripci√≥n cancelada. Tu acceso continuar√° hasta el final del per√≠odo actual.');
        } catch (error) {
            console.error('‚ùå Error cancelando suscripci√≥n:', error);
            this.showError('Error cancelando la suscripci√≥n');
        }
    }

    async renewSubscription() {
        try {
            console.log('üîÑ Renovando suscripci√≥n...');
            
            if (!this.currentSubscription) {
                this.showError('No tienes una suscripci√≥n activa');
                return;
            }

            // Procesar renovaci√≥n
            if (window.axyraWompiIntegration) {
                await window.axyraWompiIntegration.initiatePayment(this.currentSubscription.plan);
            } else {
                this.showError('Sistema de pagos no disponible');
            }
        } catch (error) {
            console.error('‚ùå Error renovando suscripci√≥n:', error);
            this.showError('Error renovando la suscripci√≥n');
        }
    }

    async toggleAutoRenewal() {
        try {
            if (!this.currentSubscription) {
                this.showError('No tienes una suscripci√≥n activa');
                return;
            }

            const newStatus = !this.currentSubscription.autoRenewal;
            const action = newStatus ? 'activar' : 'desactivar';
            
            const confirmed = await this.showConfirmation(
                `${action.charAt(0).toUpperCase() + action.slice(1)} Renovaci√≥n Autom√°tica`,
                `¬øEst√°s seguro de que quieres ${action} la renovaci√≥n autom√°tica?`
            );

            if (!confirmed) return;

            // Actualizar estado de renovaci√≥n autom√°tica
            await window.firebase.firestore()
                .collection('users')
                .doc(this.currentUser.uid)
                .update({
                    'membership.autoRenewal': newStatus,
                    'membership.lastUpdated': window.firebase.firestore.FieldValue.serverTimestamp()
                });

            this.currentSubscription.autoRenewal = newStatus;
            this.updateSubscriptionUI();
            
            this.showSuccess(`Renovaci√≥n autom√°tica ${action}da correctamente`);
        } catch (error) {
            console.error('‚ùå Error cambiando renovaci√≥n autom√°tica:', error);
            this.showError('Error cambiando la renovaci√≥n autom√°tica');
        }
    }

    async updateSubscriptionPlan(planId, type) {
        try {
            await window.firebase.firestore()
                .collection('users')
                .doc(this.currentUser.uid)
                .update({
                    'membership.pendingPlan': planId,
                    'membership.pendingChangeType': type,
                    'membership.lastUpdated': window.firebase.firestore.FieldValue.serverTimestamp()
                });

            console.log(`‚úÖ Plan ${type}do a: ${planId}`);
        } catch (error) {
            console.error('‚ùå Error actualizando plan:', error);
            throw error;
        }
    }

    async updateSubscriptionStatus(status) {
        try {
            await window.firebase.firestore()
                .collection('users')
                .doc(this.currentUser.uid)
                .update({
                    'membership.status': status,
                    'membership.lastUpdated': window.firebase.firestore.FieldValue.serverTimestamp()
                });

            this.currentSubscription.status = status;
            this.updateSubscriptionUI();
            
            console.log(`‚úÖ Estado de suscripci√≥n actualizado a: ${status}`);
        } catch (error) {
            console.error('‚ùå Error actualizando estado:', error);
            throw error;
        }
    }

    getStatusText(status) {
        const statusTexts = {
            'active': 'Activa',
            'inactive': 'Inactiva',
            'expired': 'Expirada',
            'cancelled': 'Cancelada',
            'payment_failed': 'Pago Fallido',
            'renewal_failed': 'Renovaci√≥n Fallida'
        };
        return statusTexts[status] || 'Desconocido';
    }

    getPlanName(planId) {
        const planNames = {
            'free': 'Gratis',
            'basic': 'B√°sico',
            'professional': 'Profesional',
            'enterprise': 'Empresarial'
        };
        return planNames[planId] || 'Desconocido';
    }

    getPlanDetails(planId) {
        const plans = {
            'basic': {
                id: 'basic',
                name: 'Plan B√°sico',
                price: 49900,
                features: ['Hasta 25 empleados', 'Reportes b√°sicos', 'Soporte por email']
            },
            'professional': {
                id: 'professional',
                name: 'Plan Profesional',
                price: 129900,
                features: ['Empleados ilimitados', 'Reportes avanzados', 'Soporte prioritario']
            },
            'enterprise': {
                id: 'enterprise',
                name: 'Plan Empresarial',
                price: 259900,
                features: ['Todo lo anterior', 'M√∫ltiples sucursales', 'Soporte dedicado']
            }
        };
        return plans[planId];
    }

    async showConfirmation(title, message) {
        return new Promise((resolve) => {
            const modal = document.createElement('div');
            modal.className = 'axyra-modal';
            modal.innerHTML = `
                <div class="axyra-modal-content">
                    <h3>${title}</h3>
                    <p>${message}</p>
                    <div class="modal-actions">
                        <button class="axyra-btn-secondary" onclick="this.closest('.axyra-modal').remove(); window.axyraSubscriptionManager.resolveConfirmation(false)">Cancelar</button>
                        <button class="axyra-btn-primary" onclick="this.closest('.axyra-modal').remove(); window.axyraSubscriptionManager.resolveConfirmation(true)">Confirmar</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            // Guardar referencia para resolver la promesa
            window.axyraSubscriptionManager.resolveConfirmation = resolve;
        });
    }

    showError(message) {
        if (window.axyraErrorHandler) {
            window.axyraErrorHandler.showNotification('Error', message, 'error');
        } else {
            alert(`Error: ${message}`);
        }
    }

    showSuccess(message) {
        if (window.axyraErrorHandler) {
            window.axyraErrorHandler.showNotification('√âxito', message, 'success');
        } else {
            alert(`√âxito: ${message}`);
        }
    }
}

// Inicializar gestor de suscripciones cuando el DOM est√© cargado
document.addEventListener('DOMContentLoaded', () => {
    if (!window.axyraSubscriptionManager) {
        window.axyraSubscriptionManager = new AxyraSubscriptionManager();
    }
});
