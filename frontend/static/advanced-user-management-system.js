class AxyraAdvancedUserManagementSystem{constructor(){this.users = [];this.roles = [];this.permissions = [];this.userRoles = [];this.rolePermissions = [];this.userSessions = [];this.userActivities = [];this.userPreferences = [];this.userGroups = [];this.userLogs = [];this.isInitialized = false;this.init();}init(){console.log('ðŸ‘¥ Inicializando sistema de gestiÃ³n de usuarios avanzada...');this.loadUsers();this.loadRoles();this.loadPermissions();this.loadUserRoles();this.loadRolePermissions();this.loadUserSessions();this.loadUserActivities();this.loadUserPreferences();this.loadUserGroups();this.loadUserLogs();this.setupEventListeners();this.setupDefaultData();this.isInitialized = true;}loadUsers(){try{const stored = localStorage.getItem('axyra_users');if(stored){this.users = JSON.parse(stored);}}catch(error){console.warn('Error cargando usuarios:',error);}}saveUsers(){try{localStorage.setItem('axyra_users',JSON.stringify(this.users));}catch(error){console.error('Error guardando usuarios:',error);}}loadRoles(){try{const stored = localStorage.getItem('axyra_roles');if(stored){this.roles = JSON.parse(stored);}}catch(error){console.warn('Error cargando roles:',error);}}saveRoles(){try{localStorage.setItem('axyra_roles',JSON.stringify(this.roles));}catch(error){console.error('Error guardando roles:',error);}}loadPermissions(){try{const stored = localStorage.getItem('axyra_permissions');if(stored){this.permissions = JSON.parse(stored);}}catch(error){console.warn('Error cargando permisos:',error);}}savePermissions(){try{localStorage.setItem('axyra_permissions',JSON.stringify(this.permissions));}catch(error){console.error('Error guardando permisos:',error);}}loadUserRoles(){try{const stored = localStorage.getItem('axyra_user_roles');if(stored){this.userRoles = JSON.parse(stored);}}catch(error){console.warn('Error cargando roles de usuario:',error);}}saveUserRoles(){try{localStorage.setItem('axyra_user_roles',JSON.stringify(this.userRoles));}catch(error){console.error('Error guardando roles de usuario:',error);}}loadRolePermissions(){try{const stored = localStorage.getItem('axyra_role_permissions');if(stored){this.rolePermissions = JSON.parse(stored);}}catch(error){console.warn('Error cargando permisos de rol:',error);}}saveRolePermissions(){try{localStorage.setItem('axyra_role_permissions',JSON.stringify(this.rolePermissions));}catch(error){console.error('Error guardando permisos de rol:',error);}}loadUserSessions(){try{const stored = localStorage.getItem('axyra_user_sessions');if(stored){this.userSessions = JSON.parse(stored);}}catch(error){console.warn('Error cargando sesiones de usuario:',error);}}saveUserSessions(){try{localStorage.setItem('axyra_user_sessions',JSON.stringify(this.userSessions));}catch(error){console.error('Error guardando sesiones de usuario:',error);}}loadUserActivities(){try{const stored = localStorage.getItem('axyra_user_activities');if(stored){this.userActivities = JSON.parse(stored);}}catch(error){console.warn('Error cargando actividades de usuario:',error);}}saveUserActivities(){try{localStorage.setItem('axyra_user_activities',JSON.stringify(this.userActivities));}catch(error){console.error('Error guardando actividades de usuario:',error);}}loadUserPreferences(){try{const stored = localStorage.getItem('axyra_user_preferences');if(stored){this.userPreferences = JSON.parse(stored);}}catch(error){console.warn('Error cargando preferencias de usuario:',error);}}saveUserPreferences(){try{localStorage.setItem('axyra_user_preferences',JSON.stringify(this.userPreferences));}catch(error){console.error('Error guardando preferencias de usuario:',error);}}loadUserGroups(){try{const stored = localStorage.getItem('axyra_user_groups');if(stored){this.userGroups = JSON.parse(stored);}}catch(error){console.warn('Error cargando grupos de usuario:',error);}}saveUserGroups(){try{localStorage.setItem('axyra_user_groups',JSON.stringify(this.userGroups));}catch(error){console.error('Error guardando grupos de usuario:',error);}}loadUserLogs(){try{const stored = localStorage.getItem('axyra_user_logs');if(stored){this.userLogs = JSON.parse(stored);}}catch(error){console.warn('Error cargando logs de usuario:',error);}}saveUserLogs(){try{localStorage.setItem('axyra_user_logs',JSON.stringify(this.userLogs));}catch(error){console.error('Error guardando logs de usuario:',error);}}setupEventListeners(){document.addEventListener('userChanged',(event)=>{this.handleUserChange(event.detail);});document.addEventListener('roleChanged',(event)=>{this.handleRoleChange(event.detail);});}setupDefaultData(){if(this.roles.length === 0){this.roles = [{id:'admin',name:'Administrador',description:'Rol con acceso completo al sistema',level:100,isActive:true,},{id:'gerente',name:'Gerente',description:'Rol de gerencia con acceso a la mayorÃ­a de funciones',level:80,isActive:true,},{id:'supervisor',name:'Supervisor',description:'Rol de supervisiÃ³n con acceso limitado',level:60,isActive:true,},{id:'empleado',name:'Empleado',description:'Rol bÃ¡sico de empleado',level:40,isActive:true,},{id:'contador',name:'Contador',description:'Rol especializado en funciones contables',level:70,isActive:true,},];this.saveRoles();}if(this.permissions.length === 0){this.permissions = [{id:'read_users',name:'Leer Usuarios',description:'Permiso para leer informaciÃ³n de usuarios',category:'users',isActive:true,},{id:'write_users',name:'Escribir Usuarios',description:'Permiso para crear y modificar usuarios',category:'users',isActive:true,},{id:'delete_users',name:'Eliminar Usuarios',description:'Permiso para eliminar usuarios',category:'users',isActive:true,},{id:'read_roles',name:'Leer Roles',description:'Permiso para leer informaciÃ³n de roles',category:'roles',isActive:true,},{id:'write_roles',name:'Escribir Roles',description:'Permiso para crear y modificar roles',category:'roles',isActive:true,},{id:'delete_roles',name:'Eliminar Roles',description:'Permiso para eliminar roles',category:'roles',isActive:true,},];this.savePermissions();}}handleUserChange(change){const{userId,action,data}= change;switch(action){case 'created':this.users.push(data);this.saveUsers();break;case 'updated':const userIndex = this.users.findIndex((u)=> u.id === userId);if(userIndex !== -1){this.users[userIndex] ={...this.users[userIndex],...data};this.saveUsers();}break;case 'deleted':this.users = this.users.filter((u)=> u.id !== userId);this.saveUsers();break;}}handleRoleChange(change){const{roleId,action,data}= change;switch(action){case 'created':this.roles.push(data);this.saveRoles();break;case 'updated':const roleIndex = this.roles.findIndex((r)=> r.id === roleId);if(roleIndex !== -1){this.roles[roleIndex] ={...this.roles[roleIndex],...data};this.saveRoles();}break;case 'deleted':this.roles = this.roles.filter((r)=> r.id !== roleId);this.saveRoles();break;}}createUser(userData){const user ={id:'user_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),username:userData.username,email:userData.email,firstName:userData.firstName || '',lastName:userData.lastName || '',password:userData.password || '',isActive:userData.isActive !== false,isVerified:userData.isVerified || false,lastLogin:userData.lastLogin || null,loginAttempts:userData.loginAttempts || 0,lockedUntil:userData.lockedUntil || null,metadata:{createdAt:new Date().toISOString(),createdBy:this.getCurrentUser(),updatedAt:new Date().toISOString(),updatedBy:this.getCurrentUser(),},};this.users.push(user);this.saveUsers();console.log('âœ… Usuario creado:',user.username);return user;}createRole(roleData){const role ={id:'role_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),name:roleData.name,description:roleData.description || '',level:roleData.level || 50,isActive:roleData.isActive !== false,metadata:{createdAt:new Date().toISOString(),createdBy:this.getCurrentUser(),updatedAt:new Date().toISOString(),updatedBy:this.getCurrentUser(),},};this.roles.push(role);this.saveRoles();console.log('âœ… Rol creado:',role.name);return role;}createPermission(permissionData){const permission ={id:'permission_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),name:permissionData.name,description:permissionData.description || '',category:permissionData.category || 'general',isActive:permissionData.isActive !== false,metadata:{createdAt:new Date().toISOString(),createdBy:this.getCurrentUser(),updatedAt:new Date().toISOString(),updatedBy:this.getCurrentUser(),},};this.permissions.push(permission);this.savePermissions();console.log('âœ… Permiso creado:',permission.name);return permission;}createUserRole(userRoleData){const userRole ={id:'user_role_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),userId:userRoleData.userId,roleId:userRoleData.roleId,assignedAt:userRoleData.assignedAt || new Date().toISOString(),assignedBy:userRoleData.assignedBy || this.getCurrentUser(),isActive:userRoleData.isActive !== false,metadata:{createdAt:new Date().toISOString(),createdBy:this.getCurrentUser(),},};this.userRoles.push(userRole);this.saveUserRoles();console.log('âœ… Rol de usuario creado:',userRole.roleId);return userRole;}createRolePermission(rolePermissionData){const rolePermission ={id:'role_permission_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),roleId:rolePermissionData.roleId,permissionId:rolePermissionData.permissionId,grantedAt:rolePermissionData.grantedAt || new Date().toISOString(),grantedBy:rolePermissionData.grantedBy || this.getCurrentUser(),isActive:rolePermissionData.isActive !== false,metadata:{createdAt:new Date().toISOString(),createdBy:this.getCurrentUser(),},};this.rolePermissions.push(rolePermission);this.saveRolePermissions();console.log('âœ… Permiso de rol creado:',rolePermission.permissionId);return rolePermission;}createUserSession(sessionData){const session ={id:'session_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),userId:sessionData.userId,token:sessionData.token || this.generateToken(),ipAddress:sessionData.ipAddress || 'unknown',userAgent:sessionData.userAgent || navigator.userAgent,startedAt:sessionData.startedAt || new Date().toISOString(),lastActivity:sessionData.lastActivity || new Date().toISOString(),expiresAt:sessionData.expiresAt || new Date(Date.now()+ 30 * 60 * 1000).toISOString(),isActive:sessionData.isActive !== false,metadata:{createdBy:this.getCurrentUser(),},};this.userSessions.push(session);this.saveUserSessions();console.log('âœ… SesiÃ³n de usuario creada:',session.id);return session;}createUserActivity(activityData){const activity ={id:'activity_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),userId:activityData.userId,action:activityData.action,resource:activityData.resource || '',details:activityData.details || '',ipAddress:activityData.ipAddress || 'unknown',userAgent:activityData.userAgent || navigator.userAgent,timestamp:new Date().toISOString(),metadata:{createdBy:this.getCurrentUser(),},};this.userActivities.push(activity);this.saveUserActivities();console.log('âœ… Actividad de usuario creada:',activity.action);return activity;}createUserPreference(preferenceData){const preference ={id:'preference_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),userId:preferenceData.userId,key:preferenceData.key,value:preferenceData.value,category:preferenceData.category || 'general',isActive:preferenceData.isActive !== false,metadata:{createdAt:new Date().toISOString(),createdBy:this.getCurrentUser(),updatedAt:new Date().toISOString(),updatedBy:this.getCurrentUser(),},};this.userPreferences.push(preference);this.saveUserPreferences();console.log('âœ… Preferencia de usuario creada:',preference.key);return preference;}createUserGroup(groupData){const group ={id:'group_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),name:groupData.name,description:groupData.description || '',members:groupData.members || [],isActive:groupData.isActive !== false,metadata:{createdAt:new Date().toISOString(),createdBy:this.getCurrentUser(),updatedAt:new Date().toISOString(),updatedBy:this.getCurrentUser(),},};this.userGroups.push(group);this.saveUserGroups();console.log('âœ… Grupo de usuario creado:',group.name);return group;}createUserLog(logData){const log ={id:'log_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),level:logData.level,message:logData.message,userId:logData.userId || this.getCurrentUser(),source:logData.source || 'system',category:logData.category || 'general',data:logData.data ||{},timestamp:new Date().toISOString(),metadata:{createdBy:this.getCurrentUser(),},};this.userLogs.push(log);this.saveUserLogs();console.log('âœ… Log de usuario creado:',log.message);return log;}generateToken(){const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';let result = '';for(let i = 0;i < 32;i++){result += chars.charAt(Math.floor(Math.random()* chars.length));}return result;}getUserStatistics(){const totalUsers = this.users.length;const activeUsers = this.users.filter((u)=> u.isActive).length;const verifiedUsers = this.users.filter((u)=> u.isVerified).length;const totalRoles = this.roles.length;const activeRoles = this.roles.filter((r)=> r.isActive).length;const totalPermissions = this.permissions.length;const activePermissions = this.permissions.filter((p)=> p.isActive).length;const totalUserRoles = this.userRoles.length;const activeUserRoles = this.userRoles.filter((ur)=> ur.isActive).length;const totalRolePermissions = this.rolePermissions.length;const activeRolePermissions = this.rolePermissions.filter((rp)=> rp.isActive).length;const totalSessions = this.userSessions.length;const activeSessions = this.userSessions.filter((s)=> s.isActive).length;const totalActivities = this.userActivities.length;const totalPreferences = this.userPreferences.length;const totalGroups = this.userGroups.length;const activeGroups = this.userGroups.filter((g)=> g.isActive).length;const totalLogs = this.userLogs.length;const errorLogs = this.userLogs.filter((l)=> l.level === 'error').length;return{totalUsers,activeUsers,verifiedUsers,totalRoles,activeRoles,totalPermissions,activePermissions,totalUserRoles,activeUserRoles,totalRolePermissions,activeRolePermissions,totalSessions,activeSessions,totalActivities,totalPreferences,totalGroups,activeGroups,totalLogs,errorLogs,};}showUserManagementDashboard(){const dashboard = document.createElement('div');dashboard.id = 'user-management-dashboard';dashboard.innerHTML = ` <div class="user-management-dashboard-overlay"> <div class="user-management-dashboard-container"> <div class="user-management-dashboard-header"> <h3>ðŸ‘¥ Dashboard de GestiÃ³n de Usuarios</h3> <div class="user-management-dashboard-actions"> <button class="btn btn-primary" onclick="axyraAdvancedUserManagementSystem.showCreateUserDialog()">Nuevo Usuario</button> <button class="btn btn-secondary" onclick="axyraAdvancedUserManagementSystem.showCreateRoleDialog()">Nuevo Rol</button> <button class="btn btn-close" onclick="document.getElementById('user-management-dashboard').remove()">Ã—</button> </div> </div> <div class="user-management-dashboard-body"> <div class="user-management-dashboard-stats"> ${this.renderUserStats()}</div> <div class="user-management-dashboard-content"> <div class="user-management-dashboard-tabs"> <button class="tab-btn active" data-tab="overview">Resumen</button> <button class="tab-btn" data-tab="users">Usuarios</button> <button class="tab-btn" data-tab="roles">Roles</button> <button class="tab-btn" data-tab="permissions">Permisos</button> <button class="tab-btn" data-tab="sessions">Sesiones</button> <button class="tab-btn" data-tab="activities">Actividades</button> <button class="tab-btn" data-tab="preferences">Preferencias</button> <button class="tab-btn" data-tab="groups">Grupos</button> <button class="tab-btn" data-tab="logs">Logs</button> </div> <div class="user-management-dashboard-tab-content"> <div class="tab-content active" id="overview-tab"> ${this.renderOverview()}</div> <div class="tab-content" id="users-tab"> ${this.renderUsersList()}</div> <div class="tab-content" id="roles-tab"> ${this.renderRolesList()}</div> <div class="tab-content" id="permissions-tab"> ${this.renderPermissionsList()}</div> <div class="tab-content" id="sessions-tab"> ${this.renderSessionsList()}</div> <div class="tab-content" id="activities-tab"> ${this.renderActivitiesList()}</div> <div class="tab-content" id="preferences-tab"> ${this.renderPreferencesList()}</div> <div class="tab-content" id="groups-tab"> ${this.renderGroupsList()}</div> <div class="tab-content" id="logs-tab"> ${this.renderLogsList()}</div> </div> </div> </div> </div> </div> `;dashboard.style.cssText = ` position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);z-index:10000;display:flex;align-items:center;justify-content:center;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,sans-serif;`;document.body.appendChild(dashboard);const tabBtns = dashboard.querySelectorAll('.tab-btn');const tabContents = dashboard.querySelectorAll('.tab-content');tabBtns.forEach((btn)=>{btn.addEventListener('click',()=>{const tabId = btn.dataset.tab;tabBtns.forEach((b)=> b.classList.remove('active'));tabContents.forEach((c)=> c.classList.remove('active'));btn.classList.add('active');document.getElementById(`${tabId}-tab`).classList.add('active');});});}renderUserStats(){const stats = this.getUserStatistics();return ` <div class="stats-grid"> <div class="stat-card"> <div class="stat-value">${stats.totalUsers}</div> <div class="stat-label">Total Usuarios</div> </div> <div class="stat-card"> <div class="stat-value">${stats.activeUsers}</div> <div class="stat-label">Usuarios Activos</div> </div> <div class="stat-card"> <div class="stat-value">${stats.verifiedUsers}</div> <div class="stat-label">Usuarios Verificados</div> </div> <div class="stat-card"> <div class="stat-value">${stats.totalRoles}</div> <div class="stat-label">Total Roles</div> </div> <div class="stat-card"> <div class="stat-value">${stats.activeRoles}</div> <div class="stat-label">Roles Activos</div> </div> <div class="stat-card"> <div class="stat-value">${stats.totalPermissions}</div> <div class="stat-label">Total Permisos</div> </div> <div class="stat-card"> <div class="stat-value">${stats.activePermissions}</div> <div class="stat-label">Permisos Activos</div> </div> <div class="stat-card"> <div class="stat-value">${stats.totalSessions}</div> <div class="stat-label">Total Sesiones</div> </div> <div class="stat-card"> <div class="stat-value">${stats.activeSessions}</div> <div class="stat-label">Sesiones Activas</div> </div> <div class="stat-card"> <div class="stat-value">${stats.totalActivities}</div> <div class="stat-label">Total Actividades</div> </div> <div class="stat-card"> <div class="stat-value">${stats.totalPreferences}</div> <div class="stat-label">Total Preferencias</div> </div> <div class="stat-card"> <div class="stat-value">${stats.totalGroups}</div> <div class="stat-label">Total Grupos</div> </div> <div class="stat-card"> <div class="stat-value">${stats.activeGroups}</div> <div class="stat-label">Grupos Activos</div> </div> <div class="stat-card"> <div class="stat-value">${stats.totalLogs}</div> <div class="stat-label">Total Logs</div> </div> <div class="stat-card"> <div class="stat-value">${stats.errorLogs}</div> <div class="stat-label">Logs de Error</div> </div> </div> `;}renderOverview(){const stats = this.getUserStatistics();return ` <div class="overview-grid"> <div class="overview-card"> <h4>Estado de Usuarios</h4> <div class="user-status"> <div class="status-item"> <span>Usuarios Activos</span> <span>${stats.activeUsers}/${stats.totalUsers}</span> </div> <div class="status-item"> <span>Usuarios Verificados</span> <span>${stats.verifiedUsers}</span> </div> <div class="status-item"> <span>Sesiones Activas</span> <span>${stats.activeSessions}</span> </div> </div> </div> <div class="overview-card"> <h4>Roles y Permisos</h4> <div class="roles-permissions"> <div class="role-item"> <span>Roles Activos</span> <span>${stats.activeRoles}</span> </div> <div class="role-item"> <span>Permisos Activos</span> <span>${stats.activePermissions}</span> </div> <div class="role-item"> <span>Asignaciones de Rol</span> <span>${stats.activeUserRoles}</span> </div> </div> </div> <div class="overview-card"> <h4>Actividad y Grupos</h4> <div class="activity-groups"> <div class="activity-item"> <span>Total Actividades</span> <span>${stats.totalActivities}</span> </div> <div class="activity-item"> <span>Grupos Activos</span> <span>${stats.activeGroups}</span> </div> <div class="activity-item"> <span>Total Preferencias</span> <span>${stats.totalPreferences}</span> </div> </div> </div> </div> `;}renderUsersList(){const users = this.users.slice(-20);return users .map((user)=> ` <div class="user-card"> <div class="user-header"> <h5>${user.username}</h5> <span class="user-status ${user.isActive ? 'active':'inactive'}">${user.isActive ? 'Activo':'Inactivo'}</span> </div> <div class="user-info"> <p>Email:${user.email}</p> <p>Nombre:${user.firstName}${user.lastName}</p> <p>Verificado:${user.isVerified ? 'SÃ­':'No'}</p> <p>Ãšltimo login:${user.lastLogin ? new Date(user.lastLogin).toLocaleString():'Nunca'}</p> </div> <div class="user-actions"> <button onclick="axyraAdvancedUserManagementSystem.showUserDetails('${user.id}')">Ver</button> <button onclick="axyraAdvancedUserManagementSystem.editUser('${user.id}')">Editar</button> </div> </div> `).join('');}renderRolesList(){const roles = this.roles.slice(-20);return roles .map((role)=> ` <div class="role-card"> <div class="role-header"> <h5>${role.name}</h5> <span class="role-level level-${role.level}">Nivel ${role.level}</span> </div> <div class="role-info"> <p>${role.description}</p> <p>Estado:${role.isActive ? 'Activo':'Inactivo'}</p> </div> <div class="role-actions"> <button onclick="axyraAdvancedUserManagementSystem.showRoleDetails('${role.id}')">Ver</button> <button onclick="axyraAdvancedUserManagementSystem.editRole('${role.id}')">Editar</button> </div> </div> `).join('');}renderPermissionsList(){const permissions = this.permissions.slice(-20);return permissions .map((permission)=> ` <div class="permission-card"> <div class="permission-header"> <h5>${permission.name}</h5> <span class="permission-category category-${permission.category}">${permission.category}</span> </div> <div class="permission-info"> <p>${permission.description}</p> <p>Estado:${permission.isActive ? 'Activo':'Inactivo'}</p> </div> <div class="permission-actions"> <button onclick="axyraAdvancedUserManagementSystem.showPermissionDetails('${permission.id}')">Ver</button> <button onclick="axyraAdvancedUserManagementSystem.editPermission('${permission.id}')">Editar</button> </div> </div> `).join('');}renderSessionsList(){const sessions = this.userSessions.slice(-20);return sessions .map((session)=> ` <div class="session-card"> <div class="session-header"> <h5>SesiÃ³n ${session.id.substring(0,8)}</h5> <span class="session-status ${session.isActive ? 'active':'inactive'}">${session.isActive ? 'Activa':'Inactiva'}</span> </div> <div class="session-info"> <p>Usuario:${session.userId}</p> <p>IP:${session.ipAddress}</p> <p>Iniciada:${new Date(session.startedAt).toLocaleString()}</p> <p>Ãšltima actividad:${new Date(session.lastActivity).toLocaleString()}</p> </div> <div class="session-actions"> <button onclick="axyraAdvancedUserManagementSystem.showSessionDetails('${session.id}')">Ver</button> <button onclick="axyraAdvancedUserManagementSystem.terminateSession('${session.id}')">Terminar</button> </div> </div> `).join('');}renderActivitiesList(){const activities = this.userActivities.slice(-20);return activities .map((activity)=> ` <div class="activity-card"> <div class="activity-header"> <h5>${activity.action}</h5> <span class="activity-timestamp">${new Date(activity.timestamp).toLocaleString()}</span> </div> <div class="activity-info"> <p>Usuario:${activity.userId}</p> <p>Recurso:${activity.resource}</p> <p>Detalles:${activity.details}</p> <p>IP:${activity.ipAddress}</p> </div> </div> `).join('');}renderPreferencesList(){const preferences = this.userPreferences.slice(-20);return preferences .map((preference)=> ` <div class="preference-card"> <div class="preference-header"> <h5>${preference.key}</h5> <span class="preference-category category-${preference.category}">${preference.category}</span> </div> <div class="preference-info"> <p>Usuario:${preference.userId}</p> <p>Valor:${preference.value}</p> <p>Estado:${preference.isActive ? 'Activo':'Inactivo'}</p> </div> <div class="preference-actions"> <button onclick="axyraAdvancedUserManagementSystem.showPreferenceDetails('${preference.id}')">Ver</button> <button onclick="axyraAdvancedUserManagementSystem.editPreference('${preference.id}')">Editar</button> </div> </div> `).join('');}renderGroupsList(){const groups = this.userGroups.slice(-20);return groups .map((group)=> ` <div class="group-card"> <div class="group-header"> <h5>${group.name}</h5> <span class="group-status ${group.isActive ? 'active':'inactive'}">${group.isActive ? 'Activo':'Inactivo'}</span> </div> <div class="group-info"> <p>${group.description}</p> <p>Miembros:${group.members.length}</p> </div> <div class="group-actions"> <button onclick="axyraAdvancedUserManagementSystem.showGroupDetails('${group.id}')">Ver</button> <button onclick="axyraAdvancedUserManagementSystem.editGroup('${group.id}')">Editar</button> </div> </div> `).join('');}renderLogsList(){const logs = this.userLogs.slice(-20);return logs .map((log)=> ` <div class="log-card"> <div class="log-header"> <h5>${log.message}</h5> <span class="log-level level-${log.level}">${log.level}</span> </div> <div class="log-info"> <p>Usuario:${log.userId}</p> <p>Fuente:${log.source}</p> <p>CategorÃ­a:${log.category}</p> <p>Fecha:${new Date(log.timestamp).toLocaleString()}</p> </div> </div> `).join('');}showCreateUserDialog(){const username = prompt('Nombre de usuario:');if(username){const email = prompt('Email:');const firstName = prompt('Nombre:');const lastName = prompt('Apellido:');this.createUser({username,email,firstName,lastName});}}showCreateRoleDialog(){const name = prompt('Nombre del rol:');if(name){const description = prompt('DescripciÃ³n:');const level = prompt('Nivel(0-100):');this.createRole({name,description,level:parseInt(level)});}}showUserDetails(userId){const user = this.users.find((u)=> u.id === userId);if(user){alert(`Usuario:${user.username}\nEmail:${user.email}\nNombre:${user.firstName}${user.lastName}\nEstado:${user.isActive ? 'Activo':'Inactivo'}\nVerificado:${user.isVerified ? 'SÃ­':'No'}`);}}editUser(userId){const user = this.users.find((u)=> u.id === userId);if(user){const newUsername = prompt('Nuevo nombre de usuario:',user.username);if(newUsername){user.username = newUsername;this.saveUsers();}}}showRoleDetails(roleId){const role = this.roles.find((r)=> r.id === roleId);if(role){alert(`Rol:${role.name}\nDescripciÃ³n:${role.description}\nNivel:${role.level}\nEstado:${role.isActive ? 'Activo':'Inactivo'}`);}}editRole(roleId){const role = this.roles.find((r)=> r.id === roleId);if(role){const newName = prompt('Nuevo nombre:',role.name);if(newName){role.name = newName;this.saveRoles();}}}showPermissionDetails(permissionId){const permission = this.permissions.find((p)=> p.id === permissionId);if(permission){alert(`Permiso:${permission.name}\nDescripciÃ³n:${permission.description}\nCategorÃ­a:${permission.category}\nEstado:${permission.isActive ? 'Activo':'Inactivo'}`);}}editPermission(permissionId){const permission = this.permissions.find((p)=> p.id === permissionId);if(permission){const newName = prompt('Nuevo nombre:',permission.name);if(newName){permission.name = newName;this.savePermissions();}}}showSessionDetails(sessionId){const session = this.userSessions.find((s)=> s.id === sessionId);if(session){alert(`SesiÃ³n:${session.id}\nUsuario:${session.userId}\nIP:${session.ipAddress}\nIniciada:${new Date(session.startedAt).toLocaleString()}\nEstado:${session.isActive ? 'Activa':'Inactiva'}`);}}terminateSession(sessionId){const session = this.userSessions.find((s)=> s.id === sessionId);if(session){session.isActive = false;this.saveUserSessions();}}showPreferenceDetails(preferenceId){const preference = this.userPreferences.find((p)=> p.id === preferenceId);if(preference){alert(`Preferencia:${preference.key}\nUsuario:${preference.userId}\nValor:${preference.value}\nCategorÃ­a:${preference.category}`);}}editPreference(preferenceId){const preference = this.userPreferences.find((p)=> p.id === preferenceId);if(preference){const newValue = prompt('Nuevo valor:',preference.value);if(newValue !== null){preference.value = newValue;this.saveUserPreferences();}}}showGroupDetails(groupId){const group = this.userGroups.find((g)=> g.id === groupId);if(group){alert(`Grupo:${group.name}\nDescripciÃ³n:${group.description}\nMiembros:${group.members.length}\nEstado:${group.isActive ? 'Activo':'Inactivo'}`);}}editGroup(groupId){const group = this.userGroups.find((g)=> g.id === groupId);if(group){const newName = prompt('Nuevo nombre:',group.name);if(newName){group.name = newName;this.saveUserGroups();}}}getCurrentUser(){if(window.obtenerUsuarioActual){const user = window.obtenerUsuarioActual();return user ? user.id:'anonymous';}return 'anonymous';}}let axyraAdvancedUserManagementSystem;document.addEventListener('DOMContentLoaded',()=>{axyraAdvancedUserManagementSystem = new AxyraAdvancedUserManagementSystem();window.axyraAdvancedUserManagementSystem = axyraAdvancedUserManagementSystem;});window.AxyraAdvancedUserManagementSystem = AxyraAdvancedUserManagementSystem;