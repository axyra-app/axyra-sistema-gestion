// ========================================
// CONFIGURACI√ìN DE VALIDACI√ìN WOMPI AXYRA
// ========================================

class AxyraWompiValidation {
  constructor() {
    this.config = {
      // Configuraci√≥n para validaci√≥n de identidad
      validationAmount: 200, // $200 COP para validaci√≥n
      currency: 'COP',
      description: 'Validaci√≥n de identidad - Prueba gratuita AXYRA',

      // Configuraci√≥n de Wompi
      wompiConfig: {
        publicKey: 'pub_prod_DMd1RNFhiA3813HZ3YZFsNjSg2beSS00', // Clave p√∫blica de Wompi
        environment: 'production', // 'test' o 'production'
        redirectUrl: window.location.origin + '/modulos/membresias/membresias.html?success=true',
      },

      // Configuraci√≥n de pruebas gratuitas
      freeTrialConfig: {
        duration: 7, // d√≠as
        maxValidations: 1, // m√°ximo 1 validaci√≥n por usuario
        validationRequired: true, // requiere validaci√≥n para activar
      },
    };

    this.init();
  }

  init() {
    console.log('üîê Inicializando validaci√≥n Wompi AXYRA...');
    this.loadWompiSDK();
  }

  loadWompiSDK() {
    try {
      // Cargar SDK de Wompi si no est√° cargado
      if (typeof window.WompiWidget === 'undefined') {
        const script = document.createElement('script');
        script.src = 'https://checkout.wompi.co/widget.js';
        script.async = true;
        script.onload = () => {
          console.log('‚úÖ SDK de Wompi cargado');
          this.setupWompiWidget();
        };
        document.head.appendChild(script);
      } else {
        this.setupWompiWidget();
      }
    } catch (error) {
      console.error('‚ùå Error cargando SDK de Wompi:', error);
    }
  }

  setupWompiWidget() {
    try {
      if (window.WompiWidget) {
        console.log('üîß Configurando widget de Wompi...');
        // Configurar widget de Wompi para validaciones
        window.axyraWompiValidation = this;
      }
    } catch (error) {
      console.error('‚ùå Error configurando widget de Wompi:', error);
    }
  }

  // Procesar validaci√≥n de identidad
  async processIdentityValidation(plan, userInfo = {}) {
    try {
      console.log('üîê Procesando validaci√≥n de identidad...', {
        plan: plan.id,
        amount: this.config.validationAmount,
        userInfo,
      });

      // Verificar si el usuario ya tiene una validaci√≥n previa
      if (this.hasPreviousValidation()) {
        throw new Error('Ya tienes una validaci√≥n de identidad activa');
      }

      // Crear transacci√≥n de validaci√≥n
      const validationTransaction = {
        amount: this.config.validationAmount,
        currency: this.config.currency,
        description: this.config.description,
        reference: `validation_${Date.now()}_${plan.id}`,
        customer: {
          email: userInfo.email || 'usuario@axyra.com',
          name: userInfo.name || 'Usuario AXYRA',
        },
        plan: plan.id,
        type: 'validation',
      };

      // Procesar con Wompi
      return await this.processWompiValidation(validationTransaction);
    } catch (error) {
      console.error('‚ùå Error en validaci√≥n de identidad:', error);
      throw error;
    }
  }

  // Verificar si tiene validaci√≥n previa
  hasPreviousValidation() {
    try {
      const storedValidation = localStorage.getItem('axyra_validation');
      if (storedValidation) {
        const validation = JSON.parse(storedValidation);
        const validationDate = new Date(validation.date);
        const daysSinceValidation = (Date.now() - validationDate.getTime()) / (1000 * 60 * 60 * 24);

        // Si la validaci√≥n es menor a 30 d√≠as, es v√°lida
        return daysSinceValidation < 30;
      }
      return false;
    } catch (error) {
      console.warn('‚ö†Ô∏è Error verificando validaci√≥n previa:', error);
      return false;
    }
  }

  // Procesar validaci√≥n con Wompi
  async processWompiValidation(transaction) {
    try {
      console.log('üí≥ Procesando validaci√≥n con Wompi...', transaction);

      // Aqu√≠ ir√≠a la integraci√≥n real con Wompi
      // Por ahora simulamos el proceso

      return new Promise((resolve, reject) => {
        // Simular procesamiento de Wompi
        setTimeout(() => {
          // Simular respuesta exitosa de Wompi
          const wompiResponse = {
            success: true,
            transactionId: `wompi_${Date.now()}`,
            amount: transaction.amount,
            currency: transaction.currency,
            status: 'APPROVED',
            reference: transaction.reference,
          };

          // Guardar validaci√≥n en localStorage
          this.saveValidation(transaction.plan, wompiResponse);

          resolve(wompiResponse);
        }, 2000);
      });
    } catch (error) {
      console.error('‚ùå Error procesando validaci√≥n con Wompi:', error);
      throw error;
    }
  }

  // Guardar validaci√≥n
  saveValidation(planId, wompiResponse) {
    try {
      const validationData = {
        planId: planId,
        date: new Date().toISOString(),
        amount: wompiResponse.amount,
        transactionId: wompiResponse.transactionId,
        status: wompiResponse.status,
        reference: wompiResponse.reference,
      };

      localStorage.setItem('axyra_validation', JSON.stringify(validationData));
      console.log('‚úÖ Validaci√≥n guardada:', validationData);
    } catch (error) {
      console.error('‚ùå Error guardando validaci√≥n:', error);
    }
  }

  // Obtener informaci√≥n de validaci√≥n
  getValidationInfo() {
    try {
      const storedValidation = localStorage.getItem('axyra_validation');
      if (storedValidation) {
        return JSON.parse(storedValidation);
      }
      return null;
    } catch (error) {
      console.warn('‚ö†Ô∏è Error obteniendo informaci√≥n de validaci√≥n:', error);
      return null;
    }
  }

  // Verificar si la validaci√≥n es v√°lida
  isValidationValid() {
    const validation = this.getValidationInfo();
    if (!validation) return false;

    const validationDate = new Date(validation.date);
    const daysSinceValidation = (Date.now() - validationDate.getTime()) / (1000 * 60 * 60 * 24);

    return daysSinceValidation < 30; // V√°lida por 30 d√≠as
  }

  // Limpiar validaci√≥n (para testing)
  clearValidation() {
    localStorage.removeItem('axyra_validation');
    console.log('üßπ Validaci√≥n limpiada');
  }
}

// Inicializar validaci√≥n Wompi
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    window.axyraWompiValidation = new AxyraWompiValidation();
  });
} else {
  window.axyraWompiValidation = new AxyraWompiValidation();
}

// Exportar para uso en otros m√≥dulos
if (typeof module !== 'undefined' && module.exports) {
  module.exports = AxyraWompiValidation;
}
