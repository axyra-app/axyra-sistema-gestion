class AxyraValidationSystem{constructor(){this.rules ={};this.customValidators ={};this.isInitialized = false;this.init();}init(){try{console.log('üîç Inicializando Sistema de Validaciones AXYRA...');this.setupDefaultRules();this.setupCustomValidators();this.setupGlobalValidation();this.isInitialized = true;console.log('‚úÖ Sistema de Validaciones inicializado correctamente');}catch(error){console.error('‚ùå Error inicializando validaciones:',error);}}setupDefaultRules(){this.rules ={empleado:{nombre:{required:true,minLength:2,maxLength:100,pattern:/^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$/,message:'El nombre debe contener solo letras y espacios(2-100 caracteres)',},cedula:{required:true,pattern:/^[0-9]{6,12}$/,message:'La c√©dula debe contener entre 6 y 12 d√≠gitos',},email:{required:false,pattern:/^[^\s@]+@[^\s@]+\.[^\s@]+$/,message:'El email debe tener un formato v√°lido',},telefono:{required:false,pattern:/^[0-9+\-\s()]{7,15}$/,message:'El tel√©fono debe tener entre 7 y 15 caracteres',},salario:{required:true,min:0,max:10000000,message:'El salario debe estar entre $0 y $10,000,000',},},producto:{codigo:{required:true,minLength:3,maxLength:20,pattern:/^[A-Z0-9_-]+$/,message:'El c√≥digo debe contener solo letras may√∫sculas,n√∫meros,guiones y guiones bajos(3-20 caracteres)',},nombre:{required:true,minLength:2,maxLength:100,message:'El nombre debe tener entre 2 y 100 caracteres',},stock:{required:true,min:0,max:999999,message:'El stock debe estar entre 0 y 999,999',},precioCompra:{required:true,min:0,max:10000000,message:'El precio de compra debe estar entre $0 y $10,000,000',},precioVenta:{required:true,min:0,max:10000000,message:'El precio de venta debe estar entre $0 y $10,000,000',},},factura:{numero:{required:true,minLength:3,maxLength:20,pattern:/^[A-Z0-9_-]+$/,message:'El n√∫mero de factura debe contener solo letras may√∫sculas,n√∫meros,guiones y guiones bajos(3-20 caracteres)',},valor:{required:true,min:1,max:10000000,message:'El valor debe estar entre $1 y $10,000,000',},fecha:{required:true,message:'La fecha es obligatoria',},},horas:{fecha:{required:true,message:'La fecha es obligatoria',},empleado:{required:true,message:'El empleado es obligatorio',},horasNormales:{min:0,max:24,message:'Las horas normales deben estar entre 0 y 24',},horasExtras:{min:0,max:12,message:'Las horas extras deben estar entre 0 y 12',},},};}setupCustomValidators(){this.customValidators ={cedulaColombiana:(value)=>{if(!value)return{valid:false,message:'La c√©dula es obligatoria'};const cedula = value.replace(/\D/g,'');if(cedula.length < 6 || cedula.length > 12){return{valid:false,message:'La c√©dula debe tener entre 6 y 12 d√≠gitos'};}let suma = 0;const multiplicadores = [3,7,13,17,19,23,29,37,41,43,47,53,59,67,71];for(let i = 0;i < cedula.length - 1;i++){suma += parseInt(cedula[i])* multiplicadores[i];}const residuo = suma % 11;const digitoVerificador = residuo < 2 ? residuo:11 - residuo;if(parseInt(cedula[cedula.length - 1])!== digitoVerificador){return{valid:false,message:'La c√©dula no es v√°lida'};}return{valid:true};},codigoUnico:(value,context,existingItems)=>{if(!value)return{valid:false,message:'El c√≥digo es obligatorio'};const existe = existingItems.some((item)=> item.codigo && item.codigo.toLowerCase()=== value.toLowerCase());if(existe){return{valid:false,message:'Este c√≥digo ya existe'};}return{valid:true};},rangoFechas:(fechaInicio,fechaFin)=>{if(!fechaInicio || !fechaFin){return{valid:false,message:'Ambas fechas son obligatorias'};}const inicio = new Date(fechaInicio);const fin = new Date(fechaFin);if(inicio > fin){return{valid:false,message:'La fecha de inicio debe ser anterior a la fecha de fin'};}const diferenciaDias =(fin - inicio)/(1000 * 60 * 60 * 24);if(diferenciaDias > 365){return{valid:false,message:'El rango de fechas no puede ser mayor a 1 a√±o'};}return{valid:true};},stockMinimo:(stock,stockMinimo)=>{if(stock < 0){return{valid:false,message:'El stock no puede ser negativo'};}if(stockMinimo < 0){return{valid:false,message:'El stock m√≠nimo no puede ser negativo'};}if(stock < stockMinimo){return{valid:false,message:'El stock actual est√° por debajo del m√≠nimo'};}return{valid:true};},preciosValidos:(precioCompra,precioVenta)=>{if(precioCompra <= 0){return{valid:false,message:'El precio de compra debe ser mayor a 0'};}if(precioVenta <= 0){return{valid:false,message:'El precio de venta debe ser mayor a 0'};}if(precioVenta < precioCompra){return{valid:false,message:'El precio de venta debe ser mayor o igual al precio de compra'};}return{valid:true};},horasLaborales:(horasNormales,horasExtras)=>{const totalHoras =(horasNormales || 0)+(horasExtras || 0);if(totalHoras > 24){return{valid:false,message:'El total de horas no puede ser mayor a 24'};}if(horasNormales < 0 || horasExtras < 0){return{valid:false,message:'Las horas no pueden ser negativas'};}if(horasExtras > 12){return{valid:false,message:'Las horas extras no pueden ser mayores a 12'};}return{valid:true};},};}setupGlobalValidation(){document.addEventListener('input',(e)=>{if(e.target.matches('input,select,textarea')){this.validateField(e.target);}});document.addEventListener('submit',(e)=>{const form = e.target;if(form.matches('form')){const isValid = this.validateForm(form);if(!isValid){e.preventDefault();}}});}validateField(field){const fieldName = field.name || field.id;const fieldType = this.getFieldType(field);const value = field.value;const rules = this.getFieldRules(fieldName,fieldType);if(!rules)return{valid:true};const result = this.applyValidationRules(value,rules,field);this.showFieldValidation(field,result);return result.valid;}validateForm(form){const fields = form.querySelectorAll('input,select,textarea');let isFormValid = true;fields.forEach((field)=>{const fieldValid = this.validateField(field);if(!fieldValid){isFormValid = false;}});return isFormValid;}getFieldType(field){if(field.type === 'email')return 'email';if(field.type === 'tel')return 'telefono';if(field.type === 'number')return 'numero';if(field.type === 'date')return 'fecha';if(field.name && field.name.includes('cedula'))return 'cedula';if(field.name && field.name.includes('codigo'))return 'codigo';return 'texto';}getFieldRules(fieldName,fieldType){for(const [entity,entityRules] of Object.entries(this.rules)){if(entityRules[fieldName]){return entityRules[fieldName];}}const typeRules ={email:this.rules.empleado.email,telefono:this.rules.empleado.telefono,cedula:this.rules.empleado.cedula,numero:{min:0,message:'El valor debe ser mayor o igual a 0'},fecha:{required:true,message:'La fecha es obligatoria'},};return typeRules[fieldType];}applyValidationRules(value,rules,field){if(rules.required &&(!value || value.trim()=== '')){return{valid:false,message:rules.message || 'Este campo es obligatorio'};}if(!rules.required &&(!value || value.trim()=== '')){return{valid:true};}if(rules.minLength && value.length < rules.minLength){return{valid:false,message:rules.message || `Debe tener al menos ${rules.minLength}caracteres`};}if(rules.maxLength && value.length > rules.maxLength){return{valid:false,message:rules.message || `No puede tener m√°s de ${rules.maxLength}caracteres`};}if(rules.pattern && !rules.pattern.test(value)){return{valid:false,message:rules.message || 'El formato no es v√°lido'};}if(rules.min !== undefined && parseFloat(value)< rules.min){return{valid:false,message:rules.message || `El valor debe ser mayor o igual a ${rules.min}`};}if(rules.max !== undefined && parseFloat(value)> rules.max){return{valid:false,message:rules.message || `El valor debe ser menor o igual a ${rules.max}`};}return{valid:true};}showFieldValidation(field,result){this.clearFieldValidation(field);if(!result.valid){field.classList.add('axyra-field-error');const errorDiv = document.createElement('div');errorDiv.className = 'axyra-field-error-message';errorDiv.textContent = result.message;field.parentNode.insertBefore(errorDiv,field.nextSibling);}else{field.classList.add('axyra-field-success');}}clearFieldValidation(field){field.classList.remove('axyra-field-error','axyra-field-success');const errorMessage = field.parentNode.querySelector('.axyra-field-error-message');if(errorMessage){errorMessage.remove();}}validateCustom(validatorName,...args){const validator = this.customValidators[validatorName];if(!validator){console.error(`Validador personalizado '${validatorName}' no encontrado`);return{valid:false,message:'Error de validaci√≥n'};}return validator(...args);}validateEmpleado(empleadoData){const errors = [];const nombreResult = this.validateCustom('cedulaColombiana',empleadoData.cedula);if(!nombreResult.valid){errors.push(nombreResult.message);}const cedulaResult = this.validateCustom('cedulaColombiana',empleadoData.cedula);if(!cedulaResult.valid){errors.push(cedulaResult.message);}if(empleadoData.salario < 0 || empleadoData.salario > 10000000){errors.push('El salario debe estar entre $0 y $10,000,000');}return{valid:errors.length === 0,errors:errors,};}validateProducto(productoData,existingProductos = []){const errors = [];const codigoResult = this.validateCustom('codigoUnico',productoData.codigo,'producto',existingProductos);if(!codigoResult.valid){errors.push(codigoResult.message);}const preciosResult = this.validateCustom('preciosValidos',productoData.precioCompra,productoData.precioVenta);if(!preciosResult.valid){errors.push(preciosResult.message);}const stockResult = this.validateCustom('stockMinimo',productoData.stock,productoData.stockMinimo);if(!stockResult.valid){errors.push(stockResult.message);}return{valid:errors.length === 0,errors:errors,};}validateFactura(facturaData,existingFacturas = []){const errors = [];const numeroResult = this.validateCustom('codigoUnico',facturaData.numero,'factura',existingFacturas);if(!numeroResult.valid){errors.push(numeroResult.message);}if(facturaData.valor <= 0){errors.push('El valor de la factura debe ser mayor a 0');}return{valid:errors.length === 0,errors:errors,};}validateHoras(horasData){const errors = [];const horasResult = this.validateCustom('horasLaborales',horasData.horasNormales,horasData.horasExtras);if(!horasResult.valid){errors.push(horasResult.message);}if(!horasData.empleadoId){errors.push('El empleado es obligatorio');}if(!horasData.fecha){errors.push('La fecha es obligatoria');}return{valid:errors.length === 0,errors:errors,};}showValidationErrors(errors){if(errors.length === 0)return;const errorMessage = errors.join('\n');this.showNotification(errorMessage,'error');}showNotification(message,type = 'info'){if(window.axyraNotifications){window.axyraNotifications.show(message,type);return;}if(type === 'error'){alert('‚ùå ' + message);}else if(type === 'warning'){alert('‚ö†Ô∏è ' + message);}else if(type === 'success'){alert('‚úÖ ' + message);}else{alert('‚ÑπÔ∏è ' + message);}}validateField(field){return this.validateField(field);}validateForm(form){return this.validateForm(form);}validateEmpleado(empleadoData){return this.validateEmpleado(empleadoData);}validateProducto(productoData,existingProductos){return this.validateProducto(productoData,existingProductos);}validateFactura(facturaData,existingFacturas){return this.validateFactura(facturaData,existingFacturas);}validateHoras(horasData){return this.validateHoras(horasData);}addCustomValidator(name,validator){this.customValidators[name] = validator;}addRules(entity,field,rules){if(!this.rules[entity]){this.rules[entity] ={};}this.rules[entity][field] = rules;}}window.axyraValidation = new AxyraValidationSystem();window.AxyraValidationSystem = AxyraValidationSystem;console.log('üîç Sistema de Validaciones AXYRA cargado');