class Axyra2FASystem{constructor(){this.isEnabled = false;this.secretKey = null;this.backupCodes = [];this.methods = ['totp','sms','email','backup'];this.currentMethod = 'totp';this.issuer = 'AXYRA System';this.algorithm = 'SHA1';this.digits = 6;this.period = 30;this.window = 1;this.init();}init(){try{console.log('üîê Inicializando sistema 2FA completo...');this.loadConfig();this.check2FAStatus();this.setupEventListeners();console.log('‚úÖ Sistema 2FA inicializado correctamente');}catch(error){console.error('‚ùå Error inicializando 2FA:',error);}}async setup2FA(userId,method = 'totp'){try{console.log(`üîß Configurando 2FA para usuario ${userId}con m√©todo ${method}`);this.currentMethod = method;switch(method){case 'totp':return await this.setupTOTP(userId);case 'sms':return await this.setupSMS(userId);case 'email':return await this.setupEmail(userId);default:throw new Error(`M√©todo 2FA no soportado:${method}`);}}catch(error){console.error('‚ùå Error configurando 2FA:',error);throw error;}}async setupTOTP(userId){try{this.secretKey = this.generateSecretKey();this.backupCodes = this.generateBackupCodes();const qrCodeData = this.generateQRCodeData(userId);const config ={userId:userId,method:'totp',secretKey:this.secretKey,backupCodes:this.backupCodes,setupDate:new Date().toISOString(),enabled:false,};this.save2FAConfig(config);return{secretKey:this.secretKey,qrCodeData:qrCodeData,backupCodes:this.backupCodes,manualEntryKey:this.secretKey,};}catch(error){console.error('‚ùå Error configurando TOTP:',error);throw error;}}async setupSMS(userId){try{const phoneNumber = await this.getUserPhoneNumber(userId);if(!phoneNumber){throw new Error('N√∫mero de tel√©fono no encontrado');}const config ={userId:userId,method:'sms',phoneNumber:phoneNumber,setupDate:new Date().toISOString(),enabled:false,};this.save2FAConfig(config);return{phoneNumber:this.maskPhoneNumber(phoneNumber),message:'Se enviar√° un c√≥digo SMS para verificaci√≥n',};}catch(error){console.error('‚ùå Error configurando SMS:',error);throw error;}}async setupEmail(userId){try{const email = await this.getUserEmail(userId);if(!email){throw new Error('Email no encontrado');}const config ={userId:userId,method:'email',email:email,setupDate:new Date().toISOString(),enabled:false,};this.save2FAConfig(config);return{email:this.maskEmail(email),message:'Se enviar√° un c√≥digo por email para verificaci√≥n',};}catch(error){console.error('‚ùå Error configurando Email:',error);throw error;}}async verify2FA(userId,code,method = null){try{const config = this.get2FAConfig(userId);if(!config){throw new Error('2FA no configurado para este usuario');}const verifyMethod = method || config.method;switch(verifyMethod){case 'totp':return await this.verifyTOTP(code,config);case 'sms':return await this.verifySMS(code,config);case 'email':return await this.verifyEmail(code,config);case 'backup':return await this.verifyBackupCode(code,config);default:throw new Error(`M√©todo de verificaci√≥n no soportado:${verifyMethod}`);}}catch(error){console.error('‚ùå Error verificando 2FA:',error);throw error;}}async verifyTOTP(code,config){try{const currentTime = Math.floor(Date.now()/ 1000);const timeStep = Math.floor(currentTime / this.period);for(let i = -this.window;i <= this.window;i++){const testTime = timeStep + i;const expectedCode = this.generateTOTPCode(config.secretKey,testTime);if(code === expectedCode){this.log2FAEvent('TOTP_VERIFIED',config.userId,{method:'totp'});return{success:true,method:'totp'};}}this.log2FAEvent('TOTP_FAILED',config.userId,{method:'totp',code:code});throw new Error('C√≥digo TOTP inv√°lido o expirado');}catch(error){console.error('‚ùå Error verificando TOTP:',error);throw error;}}async verifySMS(code,config){try{const storedCode = this.getStoredSMSCode(config.userId);if(!storedCode){throw new Error('C√≥digo SMS no encontrado o expirado');}if(code === storedCode.code && new Date()< new Date(storedCode.expires)){this.log2FAEvent('SMS_VERIFIED',config.userId,{method:'sms'});return{success:true,method:'sms'};}this.log2FAEvent('SMS_FAILED',config.userId,{method:'sms',code:code});throw new Error('C√≥digo SMS inv√°lido o expirado');}catch(error){console.error('‚ùå Error verificando SMS:',error);throw error;}}async verifyEmail(code,config){try{const storedCode = this.getStoredEmailCode(config.userId);if(!storedCode){throw new Error('C√≥digo de email no encontrado o expirado');}if(code === storedCode.code && new Date()< new Date(storedCode.expires)){this.log2FAEvent('EMAIL_VERIFIED',config.userId,{method:'email'});return{success:true,method:'email'};}this.log2FAEvent('EMAIL_FAILED',config.userId,{method:'email',code:code});throw new Error('C√≥digo de email inv√°lido o expirado');}catch(error){console.error('‚ùå Error verificando Email:',error);throw error;}}async verifyBackupCode(code,config){try{if(!config.backupCodes || !Array.isArray(config.backupCodes)){throw new Error('C√≥digos de respaldo no disponibles');}const codeIndex = config.backupCodes.findIndex((backupCode)=> backupCode.code === code && !backupCode.used);if(codeIndex === -1){this.log2FAEvent('BACKUP_FAILED',config.userId,{method:'backup',code:code});throw new Error('C√≥digo de respaldo inv√°lido o ya utilizado');}config.backupCodes[codeIndex].used = true;config.backupCodes[codeIndex].usedDate = new Date().toISOString();this.save2FAConfig(config);this.log2FAEvent('BACKUP_VERIFIED',config.userId,{method:'backup'});return{success:true,method:'backup'};}catch(error){console.error('‚ùå Error verificando c√≥digo de respaldo:',error);throw error;}}async send2FACode(userId,method = null){try{const config = this.get2FAConfig(userId);if(!config){throw new Error('2FA no configurado para este usuario');}const sendMethod = method || config.method;switch(sendMethod){case 'sms':return await this.sendSMSCode(userId,config);case 'email':return await this.sendEmailCode(userId,config);default:throw new Error(`M√©todo de env√≠o no soportado:${sendMethod}`);}}catch(error){console.error('‚ùå Error enviando c√≥digo 2FA:',error);throw error;}}async sendSMSCode(userId,config){try{const code = this.generateRandomCode(6);const expires = new Date(Date.now()+ 5 * 60 * 1000);console.log(`üì± SMS enviado a ${config.phoneNumber}:${code}`);this.storeSMSCode(userId,code,expires);this.log2FAEvent('SMS_SENT',userId,{method:'sms'});return{success:true,message:`C√≥digo enviado a ${this.maskPhoneNumber(config.phoneNumber)}`,expires:expires,};}catch(error){console.error('‚ùå Error enviando SMS:',error);throw error;}}async sendEmailCode(userId,config){try{const code = this.generateRandomCode(6);const expires = new Date(Date.now()+ 10 * 60 * 1000);console.log(`üìß Email enviado a ${config.email}:${code}`);this.storeEmailCode(userId,code,expires);this.log2FAEvent('EMAIL_SENT',userId,{method:'email'});return{success:true,message:`C√≥digo enviado a ${this.maskEmail(config.email)}`,expires:expires,};}catch(error){console.error('‚ùå Error enviando Email:',error);throw error;}}async enable2FA(userId,verificationCode){try{const config = this.get2FAConfig(userId);if(!config){throw new Error('Configuraci√≥n 2FA no encontrada');}await this.verify2FA(userId,verificationCode,config.method);config.enabled = true;config.enabledDate = new Date().toISOString();this.save2FAConfig(config);this.log2FAEvent('2FA_ENABLED',userId,{method:config.method});console.log(`‚úÖ 2FA habilitado para usuario ${userId}`);return{success:true,message:'2FA habilitado exitosamente',method:config.method,};}catch(error){console.error('‚ùå Error habilitando 2FA:',error);throw error;}}async disable2FA(userId,verificationCode){try{const config = this.get2FAConfig(userId);if(!config){throw new Error('2FA no configurado para este usuario');}await this.verify2FA(userId,verificationCode,config.method);config.enabled = false;config.disabledDate = new Date().toISOString();this.save2FAConfig(config);this.log2FAEvent('2FA_DISABLED',userId,{method:config.method});console.log(`‚ùå 2FA deshabilitado para usuario ${userId}`);return{success:true,message:'2FA deshabilitado exitosamente',};}catch(error){console.error('‚ùå Error deshabilitando 2FA:',error);throw error;}}async generateNewBackupCodes(userId){try{const config = this.get2FAConfig(userId);if(!config){throw new Error('2FA no configurado para este usuario');}const newBackupCodes = this.generateBackupCodes();if(config.backupCodes){config.backupCodes.forEach((backupCode)=>{if(!backupCode.used){backupCode.used = true;backupCode.usedDate = new Date().toISOString();backupCode.reason = 'replaced';}});}config.backupCodes = [...(config.backupCodes || []),...newBackupCodes];config.lastBackupCodesGenerated = new Date().toISOString();this.save2FAConfig(config);this.log2FAEvent('BACKUP_CODES_GENERATED',userId,{count:newBackupCodes.length});return{success:true,backupCodes:newBackupCodes,message:'Nuevos c√≥digos de respaldo generados',};}catch(error){console.error('‚ùå Error generando c√≥digos de respaldo:',error);throw error;}}get2FAStatus(userId){const config = this.get2FAConfig(userId);if(!config){return{enabled:false,configured:false,method:null,};}return{enabled:config.enabled,configured:true,method:config.method,setupDate:config.setupDate,enabledDate:config.enabledDate,backupCodesCount:config.backupCodes ? config.backupCodes.filter((c)=> !c.used).length:0,};}get2FAStats(){const allConfigs = this.getAll2FAConfigs();const stats ={totalUsers:allConfigs.length,enabledUsers:allConfigs.filter((c)=> c.enabled).length,disabledUsers:allConfigs.filter((c)=> !c.enabled).length,byMethod:{},recentActivity:[],};allConfigs.forEach((config)=>{stats.byMethod[config.method] =(stats.byMethod[config.method] || 0)+ 1;});const thirtyDaysAgo = new Date(Date.now()- 30 * 24 * 60 * 60 * 1000);const recentLogs = this.get2FALogs().filter((log)=> new Date(log.timestamp)> thirtyDaysAgo);stats.recentActivity = recentLogs.slice(0,10);return stats;}generateSecretKey(){const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';let result = '';for(let i = 0;i < 32;i++){result += chars.charAt(Math.floor(Math.random()* chars.length));}return result;}generateBackupCodes(count = 10){const codes = [];for(let i = 0;i < count;i++){codes.push({code:this.generateRandomCode(8),generated:new Date().toISOString(),used:false,});}return codes;}generateRandomCode(length){const chars = '0123456789';let result = '';for(let i = 0;i < length;i++){result += chars.charAt(Math.floor(Math.random()* chars.length));}return result;}generateQRCodeData(userId){const accountName = userId;const secret = this.secretKey;const issuer = this.issuer;return `otpauth:}generateTOTPCode(secret,time){const key = this.base32Decode(secret);const timeBuffer = this.intToBytes(time);const hmac = this.hmacSha1(key,timeBuffer);const offset = hmac[hmac.length - 1] & 0xf;const code =((hmac[offset] & 0x7f)<< 24)|((hmac[offset + 1] & 0xff)<< 16)|((hmac[offset + 2] & 0xff)<< 8)|(hmac[offset + 3] & 0xff);return(code % Math.pow(10,this.digits)).toString().padStart(this.digits,'0');}base32Decode(str){return new Uint8Array(0);}intToBytes(num){const bytes = new Uint8Array(8);for(let i = 7;i >= 0;i--){bytes[i] = num & 0xff;num >>= 8;}return bytes;}hmacSha1(key,data){return new Uint8Array(20);}maskPhoneNumber(phone){if(phone.length < 4)return phone;return phone.slice(0,-4).replace(/\d/g,'*')+ phone.slice(-4);}maskEmail(email){const [local,domain] = email.split('@');if(local.length <= 2)return email;return local[0] + '*'.repeat(local.length - 2)+ local[local.length - 1] + '@' + domain;}async getUserPhoneNumber(userId){const user = this.getUser(userId);return user?.phone || null;}async getUserEmail(userId){const user = this.getUser(userId);return user?.email || null;}getUser(userId){const users = JSON.parse(localStorage.getItem('axyra_usuarios')|| '[]');return users.find((u)=> u.id === userId);}get2FAConfig(userId){try{const stored = localStorage.getItem(`axyra_2fa_${userId}`);return stored ? JSON.parse(stored):null;}catch(error){console.error('Error cargando configuraci√≥n 2FA:',error);return null;}}save2FAConfig(config){try{localStorage.setItem(`axyra_2fa_${config.userId}`,JSON.stringify(config));}catch(error){console.error('Error guardando configuraci√≥n 2FA:',error);}}getAll2FAConfigs(){const configs = [];for(let i = 0;i < localStorage.length;i++){const key = localStorage.key(i);if(key && key.startsWith('axyra_2fa_')){try{const config = JSON.parse(localStorage.getItem(key));configs.push(config);}catch(error){console.error('Error cargando configuraci√≥n 2FA:',error);}}}return configs;}storeSMSCode(userId,code,expires){const smsCode ={code,expires:expires.toISOString()};localStorage.setItem(`axyra_sms_code_${userId}`,JSON.stringify(smsCode));}getStoredSMSCode(userId){try{const stored = localStorage.getItem(`axyra_sms_code_${userId}`);return stored ? JSON.parse(stored):null;}catch(error){return null;}}storeEmailCode(userId,code,expires){const emailCode ={code,expires:expires.toISOString()};localStorage.setItem(`axyra_email_code_${userId}`,JSON.stringify(emailCode));}getStoredEmailCode(userId){try{const stored = localStorage.getItem(`axyra_email_code_${userId}`);return stored ? JSON.parse(stored):null;}catch(error){return null;}}log2FAEvent(type,userId,details ={}){if(window.axyraAuditSystem){window.axyraAuditSystem.logSecurityEvent(type,`2FA:${type}`,{userId:userId,...details,},userId);}}get2FALogs(){if(window.axyraAuditSystem){return window.axyraAuditSystem.getLogs({category:'SECURITY',type:['2FA_ENABLED','2FA_DISABLED','TOTP_VERIFIED','SMS_VERIFIED','EMAIL_VERIFIED','BACKUP_VERIFIED'],});}return [];}check2FAStatus(){const globalConfig = localStorage.getItem('axyra_2fa_global');if(globalConfig){const config = JSON.parse(globalConfig);this.isEnabled = config.enabled || false;}}setupEventListeners(){window.addEventListener('storage',(e)=>{if(e.key && e.key.startsWith('axyra_2fa_')){this.check2FAStatus();}});}loadConfig(){try{const stored = localStorage.getItem('axyra_2fa_config');if(stored){const config = JSON.parse(stored);Object.assign(this,config);}}catch(error){console.error('Error cargando configuraci√≥n 2FA:',error);}}saveConfig(){try{const config ={isEnabled:this.isEnabled,methods:this.methods,currentMethod:this.currentMethod,issuer:this.issuer,algorithm:this.algorithm,digits:this.digits,period:this.period,window:this.window,};localStorage.setItem('axyra_2fa_config',JSON.stringify(config));}catch(error){console.error('Error guardando configuraci√≥n 2FA:',error);}}}let axyra2FASystem;document.addEventListener('DOMContentLoaded',()=>{axyra2FASystem = new Axyra2FASystem();window.axyra2FASystem = axyra2FASystem;});window.Axyra2FASystem = Axyra2FASystem;