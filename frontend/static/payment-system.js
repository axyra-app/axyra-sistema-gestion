class AxyraPaymentSystem{constructor(){this.subscriptions = [];this.paymentMethods = [];this.paymentHistory = [];this.plans = [];this.isInitialized = false;this.init();}init(){console.log('💳 Inicializando sistema de pagos...');this.loadSubscriptions();this.loadPaymentMethods();this.loadPaymentHistory();this.loadPlans();this.setupEventListeners();this.setupDefaultPlans();this.isInitialized = true;}loadSubscriptions(){try{const stored = localStorage.getItem('axyra_subscriptions');if(stored){this.subscriptions = JSON.parse(stored);}}catch(error){console.warn('Error cargando suscripciones:',error);}}saveSubscriptions(){try{localStorage.setItem('axyra_subscriptions',JSON.stringify(this.subscriptions));}catch(error){console.error('Error guardando suscripciones:',error);}}loadPaymentMethods(){try{const stored = localStorage.getItem('axyra_payment_methods');if(stored){this.paymentMethods = JSON.parse(stored);}}catch(error){console.warn('Error cargando métodos de pago:',error);}}savePaymentMethods(){try{localStorage.setItem('axyra_payment_methods',JSON.stringify(this.paymentMethods));}catch(error){console.error('Error guardando métodos de pago:',error);}}loadPaymentHistory(){try{const stored = localStorage.getItem('axyra_payment_history');if(stored){this.paymentHistory = JSON.parse(stored);}}catch(error){console.warn('Error cargando historial de pagos:',error);}}savePaymentHistory(){try{localStorage.setItem('axyra_payment_history',JSON.stringify(this.paymentHistory));}catch(error){console.error('Error guardando historial de pagos:',error);}}loadPlans(){try{const stored = localStorage.getItem('axyra_plans');if(stored){this.plans = JSON.parse(stored);}}catch(error){console.warn('Error cargando planes:',error);}}savePlans(){try{localStorage.setItem('axyra_plans',JSON.stringify(this.plans));}catch(error){console.error('Error guardando planes:',error);}}setupEventListeners(){document.addEventListener('paymentProcessed',(event)=>{this.handlePaymentProcessed(event.detail);});}setupDefaultPlans(){if(this.plans.length === 0){this.plans = [{id:'basic',name:'Plan Básico',description:'Perfecto para pequeñas empresas',price:29000,currency:'COP',interval:'monthly',features:[ 'Hasta 5 empleados','Gestión básica de nómina','Reportes básicos','Soporte por email','1GB de almacenamiento',],isActive:true,},{id:'professional',name:'Plan Profesional',description:'Ideal para empresas medianas',price:59000,currency:'COP',interval:'monthly',features:[ 'Hasta 25 empleados','Gestión completa de nómina','Reportes avanzados','Soporte prioritario','5GB de almacenamiento','Integraciones API',],isActive:true,},{id:'enterprise',name:'Plan Empresarial',description:'Para grandes empresas',price:99000,currency:'COP',interval:'monthly',features:[ 'Empleados ilimitados','Todas las funcionalidades','Reportes personalizados','Soporte 24/7','50GB de almacenamiento','API completa','Soporte dedicado',],isActive:true,},];this.savePlans();}}handlePaymentProcessed(paymentData){const{subscriptionId,amount,status,method}= paymentData;const payment ={id:'payment_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),subscriptionId,amount,currency:'COP',method,status,timestamp:new Date().toISOString(),metadata:{processedBy:this.getCurrentUser(),},};this.paymentHistory.push(payment);this.savePaymentHistory();console.log('✅ Pago procesado:',payment.id);}createSubscription(subscriptionData){const subscription ={id:'sub_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),userId:subscriptionData.userId || this.getCurrentUser(),planId:subscriptionData.planId,status:subscriptionData.status || 'active',startDate:subscriptionData.startDate || new Date().toISOString(),endDate:subscriptionData.endDate || this.calculateEndDate(subscriptionData.planId),paymentMethod:subscriptionData.paymentMethod || 'bancolombia',isActive:subscriptionData.isActive !== false,metadata:{createdAt:new Date().toISOString(),createdBy:this.getCurrentUser(),},};this.subscriptions.push(subscription);this.saveSubscriptions();console.log('✅ Suscripción creada:',subscription.id);return subscription;}createPaymentMethod(methodData){const method ={id:'method_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),userId:methodData.userId || this.getCurrentUser(),type:methodData.type,accountNumber:methodData.accountNumber || '',accountName:methodData.accountName || '',isDefault:methodData.isDefault || false,isActive:methodData.isActive !== false,metadata:{createdAt:new Date().toISOString(),createdBy:this.getCurrentUser(),},};this.paymentMethods.push(method);this.savePaymentMethods();console.log('✅ Método de pago creado:',method.type);return method;}calculateEndDate(planId){const plan = this.plans.find((p)=> p.id === planId);if(plan && plan.interval === 'monthly'){const endDate = new Date();endDate.setMonth(endDate.getMonth()+ 1);return endDate.toISOString();}return new Date().toISOString();}processPayment(paymentData){const{subscriptionId,amount,method,accountNumber}= paymentData;const paymentResult = this.simulatePayment(method,amount,accountNumber);if(paymentResult.success){const payment ={id:'payment_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),subscriptionId,amount,currency:'COP',method,status:'completed',transactionId:paymentResult.transactionId,timestamp:new Date().toISOString(),metadata:{processedBy:this.getCurrentUser(),},};this.paymentHistory.push(payment);this.savePaymentHistory();const subscription = this.subscriptions.find((s)=> s.id === subscriptionId);if(subscription){subscription.status = 'active';subscription.endDate = this.calculateEndDate(subscription.planId);this.saveSubscriptions();}console.log('✅ Pago procesado exitosamente:',payment.id);return{success:true,payment,message:'Pago procesado exitosamente'};}else{console.error('❌ Error procesando pago:',paymentResult.error);return{success:false,error:paymentResult.error};}}simulatePayment(method,amount,accountNumber){const isSuccess = Math.random()> 0.1;if(isSuccess){return{success:true,transactionId:'TXN_' + Date.now()+ '_' + Math.random().toString(36).substr(2,9),message:`Pago de $${amount.toLocaleString()}COP procesado exitosamente via ${method}`,};}else{return{success:false,error:'Error procesando el pago. Por favor intenta nuevamente.',};}}getPaymentStatistics(){const totalSubscriptions = this.subscriptions.length;const activeSubscriptions = this.subscriptions.filter((s)=> s.status === 'active').length;const totalPayments = this.paymentHistory.length;const successfulPayments = this.paymentHistory.filter((p)=> p.status === 'completed').length;const totalRevenue = this.paymentHistory .filter((p)=> p.status === 'completed').reduce((sum,p)=> sum + p.amount,0);return{totalSubscriptions,activeSubscriptions,totalPayments,successfulPayments,totalRevenue,};}showPaymentDashboard(){const dashboard = document.createElement('div');dashboard.id = 'payment-dashboard';dashboard.innerHTML = ` <div class="payment-dashboard-overlay"> <div class="payment-dashboard-container"> <div class="payment-dashboard-header"> <h3>💳 Dashboard de Pagos</h3> <div class="payment-dashboard-actions"> <button class="btn btn-primary" onclick="axyraPaymentSystem.showPlansDialog()">Ver Planes</button> <button class="btn btn-secondary" onclick="axyraPaymentSystem.showPaymentMethodsDialog()">Métodos de Pago</button> <button class="btn btn-close" onclick="document.getElementById('payment-dashboard').remove()">×</button> </div> </div> <div class="payment-dashboard-body"> <div class="payment-dashboard-stats"> ${this.renderPaymentStats()}</div> <div class="payment-dashboard-content"> <div class="payment-dashboard-tabs"> <button class="tab-btn active" data-tab="overview">Resumen</button> <button class="tab-btn" data-tab="plans">Planes</button> <button class="tab-btn" data-tab="subscriptions">Suscripciones</button> <button class="tab-btn" data-tab="payments">Pagos</button> <button class="tab-btn" data-tab="methods">Métodos</button> </div> <div class="payment-dashboard-tab-content"> <div class="tab-content active" id="overview-tab"> ${this.renderOverview()}</div> <div class="tab-content" id="plans-tab"> ${this.renderPlansList()}</div> <div class="tab-content" id="subscriptions-tab"> ${this.renderSubscriptionsList()}</div> <div class="tab-content" id="payments-tab"> ${this.renderPaymentsList()}</div> <div class="tab-content" id="methods-tab"> ${this.renderMethodsList()}</div> </div> </div> </div> </div> </div> `;dashboard.style.cssText = ` position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);z-index:10000;display:flex;align-items:center;justify-content:center;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,sans-serif;`;document.body.appendChild(dashboard);const tabBtns = dashboard.querySelectorAll('.tab-btn');const tabContents = dashboard.querySelectorAll('.tab-content');tabBtns.forEach((btn)=>{btn.addEventListener('click',()=>{const tabId = btn.dataset.tab;tabBtns.forEach((b)=> b.classList.remove('active'));tabContents.forEach((c)=> c.classList.remove('active'));btn.classList.add('active');document.getElementById(`${tabId}-tab`).classList.add('active');});});}renderPaymentStats(){const stats = this.getPaymentStatistics();return ` <div class="stats-grid"> <div class="stat-card"> <div class="stat-value">${stats.totalSubscriptions}</div> <div class="stat-label">Total Suscripciones</div> </div> <div class="stat-card"> <div class="stat-value">${stats.activeSubscriptions}</div> <div class="stat-label">Suscripciones Activas</div> </div> <div class="stat-card"> <div class="stat-value">${stats.totalPayments}</div> <div class="stat-label">Total Pagos</div> </div> <div class="stat-card"> <div class="stat-value">${stats.successfulPayments}</div> <div class="stat-label">Pagos Exitosos</div> </div> <div class="stat-card"> <div class="stat-value">$${stats.totalRevenue.toLocaleString()}</div> <div class="stat-label">Ingresos Totales(COP)</div> </div> </div> `;}renderOverview(){const stats = this.getPaymentStatistics();return ` <div class="overview-grid"> <div class="overview-card"> <h4>Estado de Suscripciones</h4> <div class="subscription-status"> <div class="status-item"> <span>Suscripciones Activas</span> <span>${stats.activeSubscriptions}/${stats.totalSubscriptions}</span> </div> <div class="status-item"> <span>Tasa de Éxito</span> <span>${stats.totalPayments > 0 ? Math.round((stats.successfulPayments / stats.totalPayments)* 100):0}%</span> </div> </div> </div> <div class="overview-card"> <h4>Ingresos</h4> <div class="revenue-info"> <div class="revenue-item"> <span>Total Ingresos</span> <span>$${stats.totalRevenue.toLocaleString()}COP</span> </div> <div class="revenue-item"> <span>Pagos Exitosos</span> <span>${stats.successfulPayments}</span> </div> </div> </div> </div> `;}renderPlansList(){return this.plans .map((plan)=> ` <div class="plan-card"> <div class="plan-header"> <h5>${plan.name}</h5> <span class="plan-price">$${plan.price.toLocaleString()}COP/mes</span> </div> <div class="plan-info"> <p>${plan.description}</p> <ul class="plan-features"> ${plan.features.map((feature)=> `<li>${feature}</li>`).join('')}</ul> </div> <div class="plan-actions"> <button onclick="axyraPaymentSystem.subscribeToPlan('${plan.id}')">Suscribirse</button> </div> </div> `).join('');}renderSubscriptionsList(){const subscriptions = this.subscriptions.slice(-20);return subscriptions .map((subscription)=> ` <div class="subscription-card"> <div class="subscription-header"> <h5>Suscripción ${subscription.id.substring(0,8)}</h5> <span class="subscription-status status-${subscription.status}">${subscription.status}</span> </div> <div class="subscription-info"> <p>Plan:${subscription.planId}</p> <p>Método:${subscription.paymentMethod}</p> <p>Inicio:${new Date(subscription.startDate).toLocaleDateString()}</p> <p>Fin:${new Date(subscription.endDate).toLocaleDateString()}</p> </div> <div class="subscription-actions"> <button onclick="axyraPaymentSystem.showSubscriptionDetails('${subscription.id}')">Ver</button> <button onclick="axyraPaymentSystem.cancelSubscription('${subscription.id}')">Cancelar</button> </div> </div> `).join('');}renderPaymentsList(){const payments = this.paymentHistory.slice(-20);return payments .map((payment)=> ` <div class="payment-card"> <div class="payment-header"> <h5>Pago ${payment.id.substring(0,8)}</h5> <span class="payment-status status-${payment.status}">${payment.status}</span> </div> <div class="payment-info"> <p>Monto:$${payment.amount.toLocaleString()}COP</p> <p>Método:${payment.method}</p> <p>Fecha:${new Date(payment.timestamp).toLocaleString()}</p> <p>Transacción:${payment.transactionId || 'N/A'}</p> </div> </div> `).join('');}renderMethodsList(){const methods = this.paymentMethods.slice(-20);return methods .map((method)=> ` <div class="method-card"> <div class="method-header"> <h5>${method.type.toUpperCase()}</h5> <span class="method-status ${method.isActive ? 'active':'inactive'}">${method.isActive ? 'Activo':'Inactivo'}</span> </div> <div class="method-info"> <p>Número:${method.accountNumber}</p> <p>Nombre:${method.accountName}</p> <p>Por defecto:${method.isDefault ? 'Sí':'No'}</p> </div> <div class="method-actions"> <button onclick="axyraPaymentSystem.showMethodDetails('${method.id}')">Ver</button> <button onclick="axyraPaymentSystem.editMethod('${method.id}')">Editar</button> </div> </div> `).join('');}showPlansDialog(){const planId = prompt('Selecciona un plan(basic,professional,enterprise):');if(planId && this.plans.find((p)=> p.id === planId)){this.subscribeToPlan(planId);}}showPaymentMethodsDialog(){const type = prompt('Tipo de método(bancolombia,nequi):');if(type){const accountNumber = prompt('Número de cuenta:');const accountName = prompt('Nombre del titular:');this.createPaymentMethod({type,accountNumber,accountName});}}subscribeToPlan(planId){const plan = this.plans.find((p)=> p.id === planId);if(plan){const subscription = this.createSubscription({planId});alert(`Te has suscrito al ${plan.name}por $${plan.price.toLocaleString()}COP/mes`);}}showSubscriptionDetails(subscriptionId){const subscription = this.subscriptions.find((s)=> s.id === subscriptionId);if(subscription){alert(`Suscripción:${subscription.id}\nPlan:${subscription.planId}\nEstado:${subscription.status}\nMétodo:${subscription.paymentMethod}`);}}cancelSubscription(subscriptionId){const subscription = this.subscriptions.find((s)=> s.id === subscriptionId);if(subscription){subscription.status = 'cancelled';this.saveSubscriptions();alert('Suscripción cancelada');}}showMethodDetails(methodId){const method = this.paymentMethods.find((m)=> m.id === methodId);if(method){alert(`Método:${method.type}\nNúmero:${method.accountNumber}\nNombre:${method.accountName}\nActivo:${method.isActive ? 'Sí':'No'}`);}}editMethod(methodId){const method = this.paymentMethods.find((m)=> m.id === methodId);if(method){const newAccountNumber = prompt('Nuevo número de cuenta:',method.accountNumber);if(newAccountNumber){method.accountNumber = newAccountNumber;this.savePaymentMethods();}}}getCurrentUser(){if(window.obtenerUsuarioActual){const user = window.obtenerUsuarioActual();return user ? user.id:'anonymous';}return 'anonymous';}}let axyraPaymentSystem;document.addEventListener('DOMContentLoaded',()=>{axyraPaymentSystem = new AxyraPaymentSystem();window.axyraPaymentSystem = axyraPaymentSystem;});window.AxyraPaymentSystem = AxyraPaymentSystem;