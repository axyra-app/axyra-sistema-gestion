export function calcularHorasTrabajadas(horaEntrada,horaSalida){const entrada = new Date(`2000-01-01T${horaEntrada}`);let salida = new Date(`2000-01-01T${horaSalida}`);if(salida <= entrada){salida.setDate(salida.getDate()+ 1);}const diferencia = salida - entrada;return diferencia /(1000 * 60 * 60);}export function calcularRecargo(horas,tipo,config){const tipoHora = config.tiposHoras.find((t)=> t.id === tipo);if(!tipoHora)return 0;return(horas * tipoHora.recargo)/ 100;}export function validarLimitesHoras(horasNormales,horasExtras,config){const errores = [];if(horasNormales > config.limites.maxHorasNormales){errores.push(`Las horas normales no pueden exceder ${config.limites.maxHorasNormales}horas`);}if(horasExtras > config.limites.maxHorasExtras){errores.push(`Las horas extras no pueden exceder ${config.limites.maxHorasExtras}horas`);}const total = horasNormales + horasExtras;if(total > config.limites.maxHorasDiarias){errores.push(`El total de horas diarias no puede exceder ${config.limites.maxHorasDiarias}horas`);}return errores;}export function formatearHora(hora){return hora.substring(0,5);}export function obtenerNombreDia(fecha){const dias = ['Domingo','Lunes','Martes','Miércoles','Jueves','Viernes','Sábado'];const dia = new Date(fecha).getDay();return dias[dia];}export function esDomingo(fecha){return new Date(fecha).getDay()=== 0;}export function esHoraNocturna(hora,config){const horaNum = parseInt(hora.split(':')[0]);return(horaNum >= parseInt(config.horarios.horaInicioNocturno.split(':')[0])|| horaNum < parseInt(config.horarios.horaFinNocturno.split(':')[0]));}