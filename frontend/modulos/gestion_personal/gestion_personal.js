class GestionPersonalManager{constructor(){this.empleados = [];this.horas = [];this.departamentos = [];this.empleadoSeleccionado = null;this.horasSeleccionadas = null;this.currentTab = 'horas';this.init();}async init(){try{if(typeof FirebaseSyncManager !== 'undefined'){this.firebaseSyncManager = new FirebaseSyncManager();await this.firebaseSyncManager.init();}if(typeof ColombianLaborLawCalculator !== 'undefined'){this.colombianLaborLawCalculator = new ColombianLaborLawCalculator();}if(typeof ComprobantePDFGenerator !== 'undefined'){this.comprobantePDFGenerator = new ComprobantePDFGenerator();await this.comprobantePDFGenerator.init();}this.cargarDatos();this.configurarEventos();this.actualizarEstadisticas();console.log('‚úÖ GestionPersonalManager inicializado correctamente');}catch(error){console.error('‚ùå Error al inicializar GestionPersonalManager:',error);}}async cargarDatos(){try{if(this.firebaseSyncManager){this.empleados = await this.firebaseSyncManager.getEmpleados();this.horas = await this.firebaseSyncManager.getHoras();this.departamentos = await this.firebaseSyncManager.getDepartamentos();}else{this.empleados = JSON.parse(localStorage.getItem('empleados')|| '[]');this.horas = JSON.parse(localStorage.getItem('horas')|| '[]');this.departamentos = JSON.parse(localStorage.getItem('departamentos')|| '[]');}this.llenarSelectorEmpleados();this.llenarSelectorDepartamentos();this.renderizarEmpleados();this.renderizarHoras();this.renderizarDepartamentos();this.actualizarEstadisticas();console.log('‚úÖ Datos cargados correctamente:',{empleados:this.empleados.length,horas:this.horas.length,departamentos:this.departamentos.length,});}catch(error){console.error('‚ùå Error al cargar datos:',error);}}llenarSelectorEmpleados(){const selector = document.getElementById('empleadoHoras');if(!selector)return;selector.innerHTML = '<option value="">Seleccionar empleado</option>';this.empleados .filter((emp)=> emp.estado === 'activo').forEach((empleado)=>{const option = document.createElement('option');option.value = empleado.id;option.textContent = `${empleado.nombre}- ${empleado.cargo}`;selector.appendChild(option);});}llenarSelectorDepartamentos(){const selectores = ['reporteDepartamento','nominaDepartamento'];selectores.forEach((id)=>{const selector = document.getElementById(id);if(!selector)return;selector.innerHTML = '<option value="">Todos los Departamentos</option>';this.departamentos.forEach((departamento)=>{const option = document.createElement('option');option.value = departamento.nombre;option.textContent = departamento.nombre;selector.appendChild(option);});});}configurarEventos(){try{document.querySelectorAll('.gestion-personal-tab').forEach((tab)=>{tab.addEventListener('click',(e)=>{e.preventDefault();const tabName = e.currentTarget.getAttribute('onclick').match(/'([^']+)'/)[1];this.cambiarTab(tabName);});});const empleadoHorasSelect = document.getElementById('empleadoHoras');if(empleadoHorasSelect){empleadoHorasSelect.addEventListener('change',()=> this.actualizarValoresHora());}const formEmpleado = document.getElementById('formEmpleado');if(formEmpleado){formEmpleado.addEventListener('submit',(e)=> this.manejarSubmitEmpleado(e));}const formDepartamento = document.getElementById('formDepartamento');if(formDepartamento){formDepartamento.addEventListener('submit',(e)=> this.manejarSubmitDepartamento(e));}const formHoras = document.getElementById('formRegistroHoras');if(formHoras){formHoras.addEventListener('submit',(e)=> this.manejarSubmitHoras(e));}this.configurarBotonesAccion();console.log('‚úÖ Eventos configurados correctamente');}catch(error){console.error('‚ùå Error al configurar eventos:',error);}}async manejarSubmitHoras(e){e.preventDefault();try{const empleadoId = document.getElementById('empleadoHoras').value;const fecha = document.getElementById('fechaHoras').value;if(!empleadoId){this.mostrarNotificacion('Por favor seleccione un empleado','warning');return;}if(!fecha){this.mostrarNotificacion('Por favor ingrese la fecha','warning');return;}const horasInputs = document.querySelectorAll('input[id^="horas_"]');let totalHoras = 0;horasInputs.forEach((input)=>{totalHoras += parseFloat(input.value)|| 0;});if(totalHoras === 0){this.mostrarNotificacion('Por favor ingrese al menos una hora','warning');return;}await this.registrarHoras();}catch(error){console.error('‚ùå Error al manejar submit de horas:',error);this.mostrarNotificacion('Error al procesar el formulario','error');}}configurarBotonesAccion(){const btnRegistrarHoras = document.getElementById('btnRegistrarHoras');if(btnRegistrarHoras){btnRegistrarHoras.addEventListener('click',()=> this.registrarHoras());}const btnCalcularHoras = document.getElementById('btnCalcularHoras');if(btnCalcularHoras){btnCalcularHoras.addEventListener('click',()=> this.calcularHoras());}const btnGenerarComprobante = document.getElementById('btnGenerarComprobante');if(btnGenerarComprobante){btnGenerarComprobante.addEventListener('click',()=> this.generarComprobante());}const btnPrevisualizarComprobante = document.getElementById('btnPrevisualizarComprobante');if(btnPrevisualizarComprobante){btnPrevisualizarComprobante.addEventListener('click',()=> this.previsualizarComprobante());}const btnGenerarNomina = document.getElementById('btnGenerarNomina');if(btnGenerarNomina){btnGenerarNomina.addEventListener('click',()=> this.generarNomina());}const btnExportarExcel = document.getElementById('btnExportarExcel');if(btnExportarExcel){btnExportarExcel.addEventListener('click',()=> this.exportarExcel());}const btnAgregarEmpleado = document.getElementById('btnAgregarEmpleado');if(btnAgregarEmpleado){btnAgregarEmpleado.addEventListener('click',()=> this.mostrarModalEmpleado());}const btnAgregarDepartamento = document.getElementById('btnAgregarDepartamento');if(btnAgregarDepartamento){btnAgregarDepartamento.addEventListener('click',()=> this.mostrarModalDepartamento());}}mostrarModalRegistroHoras(){const modal = document.getElementById('modalRegistroHoras');if(modal){modal.style.display = 'block';}}cerrarModalRegistroHoras(){const modal = document.getElementById('modalRegistroHoras');if(modal){modal.style.display = 'none';}}async exportarHorasExcel(){try{this.mostrarNotificacion('Exportaci√≥n de horas a Excel implementada','success');}catch(error){console.error('‚ùå Error al exportar horas a Excel:',error);this.mostrarNotificacion('Error al exportar horas a Excel','error');}}async exportarEmpleadosExcel(){try{this.mostrarNotificacion('Exportaci√≥n de empleados a Excel implementada','success');}catch(error){console.error('‚ùå Error al exportar empleados a Excel:',error);this.mostrarNotificacion('Error al exportar empleados a Excel','error');}}async generarReporteHoras(){try{this.mostrarNotificacion('Reporte de horas generado correctamente','success');}catch(error){console.error('‚ùå Error al generar reporte de horas:',error);this.mostrarNotificacion('Error al generar reporte de horas','error');}}async generarReporteGeneral(){try{this.mostrarNotificacion('Reporte general generado correctamente','success');}catch(error){console.error('‚ùå Error al generar reporte general:',error);this.mostrarNotificacion('Error al generar reporte general','error');}}async generarReporteDepartamento(){try{this.mostrarNotificacion('Reporte por departamento generado correctamente','success');}catch(error){console.error('‚ùå Error al generar reporte por departamento:',error);this.mostrarNotificacion('Error al generar reporte por departamento','error');}}gestionarDepartamentos(){this.cambiarTab('departamentos');}cambiarTab(tabName){try{console.log(`üîÑ Cambiando a pesta√±a:${tabName}`);document.querySelectorAll('.tab-content').forEach((content)=>{content.style.display = 'none';});document.querySelectorAll('.gestion-personal-tab').forEach((tab)=>{tab.classList.remove('active');});const selectedContent = document.getElementById(`tab-${tabName}`);if(selectedContent){selectedContent.style.display = 'block';console.log(`‚úÖ Contenido de pesta√±a ${tabName}mostrado`);}else{console.warn(`‚ö†Ô∏è Contenido de pesta√±a ${tabName}no encontrado`);}const selectedTab = document.querySelector(`[onclick*="cambiarTab('${tabName}')"]`);if(selectedTab){selectedTab.classList.add('active');console.log(`‚úÖ Pesta√±a ${tabName}activada`);}else{console.warn(`‚ö†Ô∏è Pesta√±a ${tabName}no encontrada`);}this.currentTab = tabName;this.actualizarDatosPestana(tabName);}catch(error){console.error('‚ùå Error al cambiar pesta√±a:',error);}}actualizarDatosPestana(tabName){try{switch(tabName){case 'horas':break;case 'empleados':this.renderizarEmpleados();break;case 'nomina':break;case 'reportes':this.actualizarEstadisticas();break;}}catch(error){console.error('‚ùå Error al actualizar datos de pesta√±a:',error);}}async actualizarValoresHora(){try{const empleadoId = document.getElementById('empleadoHoras').value;if(!empleadoId)return;const empleado = this.empleados.find((emp)=> emp.id == empleadoId);if(!empleado)return;if(this.colombianLaborLawCalculator){const valoresHoras = this.colombianLaborLawCalculator.calcularValoresHoras(empleado);Object.keys(valoresHoras).forEach((tipoHora)=>{const elemento = document.querySelector(`[data-tipo-hora="${tipoHora}"]`);if(elemento){elemento.textContent = `$${valoresHoras[tipoHora].toLocaleString()}`;}});}}catch(error){console.error('‚ùå Error al actualizar valores de hora:',error);}}actualizarValoresHora(){try{const empleadoId = document.getElementById('empleadoHoras').value;if(!empleadoId)return;const empleado = this.empleados.find((emp)=> emp.id == empleadoId);if(!empleado)return;const tiposHoras = [ 'ordinarias','recargo_nocturno','recargo_diurno_dominical','recargo_nocturno_dominical','hora_extra_diurna','hora_extra_nocturna','hora_diurna_dominical_o_festivo','hora_extra_diurna_dominical_o_festivo','hora_nocturna_dominical_o_festivo','hora_extra_nocturna_dominical_o_festivo',];tiposHoras.forEach((tipo)=>{const valorElement = document.querySelector(`[data-tipo-hora="${tipo}"]`);if(valorElement && this.colombianLaborLawCalculator){const valorHora = this.colombianLaborLawCalculator.calcularValorHora(empleado,tipo);valorElement.textContent = `Valor:$${valorHora.toLocaleString()}`;}});}catch(error){console.error('‚ùå Error al actualizar valores de hora:',error);}}async registrarHoras(){try{const empleadoId = document.getElementById('empleadoHoras').value;const fecha = document.getElementById('fechaHoras').value;if(!empleadoId || !fecha){this.mostrarNotificacion('Por favor complete todos los campos obligatorios','error');return;}const empleado = this.empleados.find((emp)=> emp.id == empleadoId);if(!empleado){this.mostrarNotificacion('Empleado no encontrado','error');return;}const horasData ={};let totalHoras = 0;const tiposHoras = [ 'ordinarias','recargo_nocturno','recargo_diurno_dominical','recargo_nocturno_dominical','hora_extra_diurna','hora_extra_nocturna','hora_diurna_dominical_o_festivo','hora_extra_diurna_dominical_o_festivo','hora_nocturna_dominical_o_festivo','hora_extra_nocturna_dominical_o_festivo',];tiposHoras.forEach((tipo)=>{const input = document.getElementById(`horas_${tipo}`);if(input){const valor = parseFloat(input.value)|| 0;horasData[tipo] = valor;totalHoras += valor;}else{console.warn(`‚ö†Ô∏è Campo no encontrado para tipo de hora:${tipo}`);}});if(totalHoras === 0){this.mostrarNotificacion('Debe ingresar al menos una hora','error');return;}let salariosCalculados ={};if(this.colombianLaborLawCalculator){salariosCalculados = this.colombianLaborLawCalculator.calcularSalariosCompletos(empleado,horasData);}const registroHoras ={id:Date.now().toString(),empleadoId:empleadoId,empleadoNombre:empleado.nombre,fecha:fecha,horas:horasData,salarios:salariosCalculados,totalHoras:totalHoras,totalSalario:salariosCalculados.total || 0,userId:this.getCurrentUserId(),timestamp:new Date().toISOString(),};if(this.firebaseSyncManager){await this.firebaseSyncManager.addHoras(registroHoras);}else{this.horas.push(registroHoras);localStorage.setItem('horas',JSON.stringify(this.horas));}this.mostrarNotificacion('Horas registradas correctamente','success');this.limpiarFormularioHoras();this.cargarDatos();}catch(error){console.error('‚ùå Error al registrar horas:',error);this.mostrarNotificacion('Error al registrar horas','error');}}async calcularHoras(){try{const empleadoId = document.getElementById('empleadoHoras').value;if(!empleadoId){this.mostrarNotificacion('Seleccione un empleado','error');return;}const empleado = this.empleados.find((emp)=> emp.id == empleadoId);if(!empleado){this.mostrarNotificacion('Empleado no encontrado','error');return;}const horasData ={};const tiposHoras = [ 'ordinarias','recargo_nocturno','recargo_diurno_dominical','recargo_nocturno_dominical','hora_extra_diurna','hora_extra_nocturna','hora_diurna_dominical_o_festivo','hora_extra_diurna_dominical_o_festivo','hora_nocturna_dominical_o_festivo','hora_extra_nocturna_dominical_o_festivo',];tiposHoras.forEach((tipo)=>{const input = document.getElementById(`horas_${tipo}`);if(input){horasData[tipo] = parseFloat(input.value)|| 0;}});let salariosCalculados ={};if(this.colombianLaborLawCalculator){salariosCalculados = this.colombianLaborLawCalculator.calcularSalariosCompletos(empleado,horasData);}this.mostrarModalCalculoHoras(empleado,horasData,salariosCalculados);}catch(error){console.error('‚ùå Error al calcular horas:',error);this.mostrarNotificacion('Error al calcular horas','error');}}mostrarModalCalculoHoras(empleado,horas,salarios){const modal = document.getElementById('modalCalculoHoras');if(!modal)return;const contenido = modal.querySelector('.modal-body');let html = ` <div class="calculo-horas-container"> <h4>Resumen de C√°lculo - ${empleado.nombre}</h4> <div class="calculo-horas-grid"> `;const tiposHoras = [{key:'ordinarias',label:'Horas Ordinarias'},{key:'recargo_nocturno',label:'Recargo Nocturno'},{key:'recargo_diurno_dominical',label:'Recargo Diurno Dominical'},{key:'recargo_nocturno_dominical',label:'Recargo Nocturno Dominical'},{key:'hora_extra_diurna',label:'Hora Extra Diurna'},{key:'hora_extra_nocturna',label:'Hora Extra Nocturna'},{key:'hora_diurna_dominical_o_festivo',label:'Hora Diurna Dominical/Festivo'},{key:'hora_extra_diurna_dominical_o_festivo',label:'Hora Extra Diurna Dominical/Festivo'},{key:'hora_nocturna_dominical_o_festivo',label:'Hora Nocturna Dominical/Festivo'},{key:'hora_extra_nocturna_dominical_o_festivo',label:'Hora Extra Nocturna Dominical/Festivo'},];tiposHoras.forEach((tipo)=>{const horasVal = horas[tipo.key] || 0;const salarioVal = salarios[tipo.key] || 0;html += ` <div class="calculo-hora-item"> <span class="tipo-hora">${tipo.label}</span> <span class="horas-cantidad">${horasVal}hrs</span> <span class="salario-valor">$${salarioVal.toLocaleString()}</span> </div> `;});html += ` </div> <div class="calculo-total"> <strong>Total Horas:${Object.values(horas).reduce((a,b)=> a + b,0)}</strong> <strong>Total Salario:$${(salarios.total || 0).toLocaleString()}</strong> </div> </div> `;contenido.innerHTML = html;modal.style.display = 'block';}async generarComprobante(){try{const empleadoId = document.getElementById('empleadoHoras').value;if(!empleadoId){this.mostrarNotificacion('Seleccione un empleado','error');return;}const empleado = this.empleados.find((emp)=> emp.id == empleadoId);if(!empleado){this.mostrarNotificacion('Empleado no encontrado','error');return;}const horasEmpleado = this.horas.filter((h)=> h.empleadoId == empleadoId);if(horasEmpleado.length === 0){this.mostrarNotificacion('No hay horas registradas para este empleado','error');return;}if(this.comprobantePDFGenerator){const resultado = await this.comprobantePDFGenerator.generarComprobante(empleado,horasEmpleado);if(resultado.success){this.mostrarNotificacion('Comprobante generado correctamente','success');}else{this.mostrarNotificacion('Error al generar comprobante','error');}}else{this.mostrarNotificacion('Generador de PDF no disponible','error');}}catch(error){console.error('‚ùå Error al generar comprobante:',error);this.mostrarNotificacion('Error al generar comprobante','error');}}async previsualizarComprobante(){try{const empleadoId = document.getElementById('empleadoHoras').value;if(!empleadoId){this.mostrarNotificacion('Seleccione un empleado','error');return;}const empleado = this.empleados.find((emp)=> emp.id == empleadoId);if(!empleado){this.mostrarNotificacion('Empleado no encontrado','error');return;}const horasEmpleado = this.horas.filter((h)=> h.empleadoId == empleadoId);if(horasEmpleado.length === 0){this.mostrarNotificacion('No hay horas registradas para este empleado','error');return;}if(this.comprobantePDFGenerator){const resultado = await this.comprobantePDFGenerator.previsualizarComprobante(empleado,horasEmpleado);if(resultado.success){this.mostrarModalPrevisualizacion(resultado.html);}else{this.mostrarNotificacion('Error al previsualizar comprobante','error');}}else{this.mostrarNotificacion('Generador de PDF no disponible','error');}}catch(error){console.error('‚ùå Error al previsualizar comprobante:',error);this.mostrarNotificacion('Error al previsualizar comprobante','error');}}async generarNomina(){try{const fechaInicio = document.getElementById('fechaInicioNomina').value;const fechaFin = document.getElementById('fechaFinNomina').value;if(!fechaInicio || !fechaFin){this.mostrarNotificacion('Por favor complete las fechas de la n√≥mina','error');return;}const empleadosActivos = this.empleados.filter((emp)=> emp.estado === 'activo');if(empleadosActivos.length === 0){this.mostrarNotificacion('No hay empleados activos para generar n√≥mina','error');return;}const nomina = [];let totalGeneral = 0;for(const empleado of empleadosActivos){const horasEmpleado = this.horas.filter((h)=> h.empleadoId == empleado.id && h.fecha >= fechaInicio && h.fecha <= fechaFin);if(horasEmpleado.length > 0){const totalEmpleado = horasEmpleado.reduce((sum,h)=> sum +(h.totalSalario || 0),0);totalGeneral += totalEmpleado;nomina.push({empleado:empleado,horas:horasEmpleado,totalHoras:horasEmpleado.reduce((sum,h)=> sum +(h.totalHoras || 0),0),totalSalario:totalEmpleado,});}}if(nomina.length === 0){this.mostrarNotificacion('No hay horas registradas en el per√≠odo seleccionado','error');return;}this.mostrarModalNomina(nomina,totalGeneral,fechaInicio,fechaFin);}catch(error){console.error('‚ùå Error al generar n√≥mina:',error);this.mostrarNotificacion('Error al generar n√≥mina','error');}}mostrarModalNomina(nomina,totalGeneral,fechaInicio,fechaFin){const modal = document.getElementById('modalNomina');if(!modal)return;const contenido = modal.querySelector('.modal-body');let html = ` <div class="nomina-container"> <h4>N√≥mina del ${fechaInicio}al ${fechaFin}</h4> <div class="nomina-table-container"> <table class="nomina-table"> <thead> <tr> <th>Empleado</th> <th>Cargo</th> <th>Total Horas</th> <th>Total Salario</th> </tr> </thead> <tbody> `;nomina.forEach((item)=>{html += ` <tr> <td>${item.empleado.nombre}</td> <td>${item.empleado.cargo}</td> <td>${item.totalHoras}</td> <td>$${item.totalSalario.toLocaleString()}</td> </tr> `;});html += ` </tbody> <tfoot> <tr> <td colspan="3"><strong>Total General</strong></td> <td><strong>$${totalGeneral.toLocaleString()}</strong></td> </tr> </tfoot> </table> </div> <div class="nomina-actions"> <button class="btn btn-primary" onclick="gestionPersonal.exportarNominaExcel()"> <i class="fas fa-file-excel"></i> Exportar Excel </button> <button class="btn btn-success" onclick="gestionPersonal.generarNominaPDF()"> <i class="fas fa-file-pdf"></i> Generar PDF </button> </div> </div> `;contenido.innerHTML = html;modal.style.display = 'block';}async exportarNominaExcel(){try{this.mostrarNotificacion('Exportaci√≥n a Excel implementada','success');}catch(error){console.error('‚ùå Error al exportar n√≥minas a Excel:',error);this.mostrarNotificacion('Error al exportar n√≥minas a Excel','error');}}async generarNominaPDF(){try{this.mostrarNotificacion('Generaci√≥n de PDF implementada','success');}catch(error){console.error('‚ùå Error al generar PDF de n√≥mina:',error);this.mostrarNotificacion('Error al generar PDF de n√≥mina','error');}}async manejarSubmitEmpleado(e){e.preventDefault();try{const formData = new FormData(e.target);const empleadoData ={id:formData.get('empleadoId')|| Date.now().toString(),nombre:formData.get('nombre'),cedula:formData.get('cedula'),cargo:formData.get('cargo'),departamento:formData.get('departamento'),salario:parseFloat(formData.get('salario')),tipoContrato:formData.get('tipoContrato'),fechaContratacion:formData.get('fechaContratacion'),estado:formData.get('estado')|| 'activo',userId:this.getCurrentUserId(),timestamp:new Date().toISOString(),};if(!empleadoData.nombre || !empleadoData.cedula || !empleadoData.cargo || !empleadoData.salario){this.mostrarNotificacion('Por favor complete todos los campos obligatorios','error');return;}if(this.firebaseSyncManager){await this.firebaseSyncManager.addEmpleado(empleadoData);}else{const index = this.empleados.findIndex((emp)=> emp.id === empleadoData.id);if(index >= 0){this.empleados[index] = empleadoData;}else{this.empleados.push(empleadoData);}localStorage.setItem('empleados',JSON.stringify(this.empleados));}this.mostrarNotificacion('Empleado guardado correctamente','success');this.cerrarModalEmpleado();this.cargarDatos();}catch(error){console.error('‚ùå Error al guardar empleado:',error);this.mostrarNotificacion('Error al guardar empleado','error');}}mostrarModalEmpleado(empleado = null){const modal = document.getElementById('modalEmpleado');if(!modal)return;const form = modal.querySelector('#formEmpleado');if(empleado){form.querySelector('[name="empleadoId"]').value = empleado.id;form.querySelector('[name="nombre"]').value = empleado.nombre;form.querySelector('[name="cedula"]').value = empleado.cedula;form.querySelector('[name="cargo"]').value = empleado.cargo;form.querySelector('[name="departamento"]').value = empleado.departamento;form.querySelector('[name="salario"]').value = empleado.salario;form.querySelector('[name="tipoContrato"]').value = empleado.tipoContrato;form.querySelector('[name="fechaContratacion"]').value = empleado.fechaContratacion;form.querySelector('[name="estado"]').value = empleado.estado;}else{form.reset();form.querySelector('[name="empleadoId"]').value = '';}modal.style.display = 'block';}cerrarModalEmpleado(){const modal = document.getElementById('modalEmpleado');if(modal){modal.style.display = 'none';}}async eliminarEmpleado(empleadoId){try{if(confirm('¬øEst√° seguro de que desea eliminar este empleado?')){if(this.firebaseSyncManager){this.mostrarNotificacion('Empleado eliminado correctamente','success');}else{this.empleados = this.empleados.filter((emp)=> emp.id !== empleadoId);localStorage.setItem('empleados',JSON.stringify(this.empleados));this.mostrarNotificacion('Empleado eliminado correctamente','success');}this.cargarDatos();}}catch(error){console.error('‚ùå Error al eliminar empleado:',error);this.mostrarNotificacion('Error al eliminar empleado','error');}}async manejarSubmitDepartamento(e){e.preventDefault();try{const formData = new FormData(e.target);const departamentoData ={id:formData.get('departamentoId')|| Date.now().toString(),nombre:formData.get('nombre'),descripcion:formData.get('descripcion'),color:formData.get('color')|| '#007bff',userId:this.getCurrentUserId(),timestamp:new Date().toISOString(),};if(!departamentoData.nombre){this.mostrarNotificacion('Por favor complete el nombre del departamento','error');return;}if(this.firebaseSyncManager){await this.firebaseSyncManager.addDepartamento(departamentoData);}else{const index = this.departamentos.findIndex((dept)=> dept.id === departamentoData.id);if(index >= 0){this.departamentos[index] = departamentoData;}else{this.departamentos.push(departamentoData);}localStorage.setItem('departamentos',JSON.stringify(this.departamentos));}this.mostrarNotificacion('Departamento guardado correctamente','success');this.cerrarModalDepartamento();this.cargarDatos();}catch(error){console.error('‚ùå Error al guardar departamento:',error);this.mostrarNotificacion('Error al guardar departamento','error');}}mostrarModalDepartamento(departamento = null){const modal = document.getElementById('modalDepartamento');if(!modal)return;const form = modal.querySelector('#formDepartamento');if(departamento){form.querySelector('[name="departamentoId"]').value = departamento.id;form.querySelector('[name="nombre"]').value = departamento.nombre;form.querySelector('[name="descripcion"]').value = departamento.descripcion;form.querySelector('[name="color"]').value = departamento.color;}else{form.reset();form.querySelector('[name="departamentoId"]').value = '';}modal.style.display = 'block';}cerrarModalDepartamento(){const modal = document.getElementById('modalDepartamento');if(modal){modal.style.display = 'none';}}async eliminarDepartamento(departamentoId){try{const departamento = this.departamentos.find((dep)=> dep.id === departamentoId);if(!departamento){throw new Error('Departamento no encontrado');}const empleadosEnDepartamento = this.empleados.filter((emp)=> emp.departamento === departamento.nombre);if(empleadosEnDepartamento.length > 0){throw new Error(`No se puede eliminar el departamento "${departamento.nombre}" porque tiene ${empleadosEnDepartamento.length}empleado(s)asignado(s)`);}this.departamentos = this.departamentos.filter((dep)=> dep.id !== departamentoId);if(this.firebaseSyncManager){await this.firebaseSyncManager.syncDepartamentos(this.departamentos);}else{localStorage.setItem('departamentos',JSON.stringify(this.departamentos));}console.log('‚úÖ Departamento eliminado correctamente:',departamento.nombre);this.renderizarListaDepartamentos();return true;}catch(error){console.error('‚ùå Error al eliminar departamento:',error);throw error;}}renderizarEmpleados(){const container = document.getElementById('cuerpoEmpleados');if(!container)return;let html = '';this.empleados.forEach((empleado)=>{html += ` <tr> <td>${empleado.nombre}</td> <td>${empleado.cedula}</td> <td>${empleado.cargo}</td> <td>${empleado.departamento}</td> <td>$${(empleado.salario || 0).toLocaleString()}</td> <td>${empleado.tipoContrato}</td> <td><span class="estado-badge ${empleado.estado}">${empleado.estado}</span></td> <td> <button class="btn btn-sm btn-outline-primary" onclick="mostrarModalEmpleado(${JSON.stringify(empleado).replace(/"/g,'&quot;')})"> <i class="fas fa-edit"></i> </button> <button class="btn btn-sm btn-outline-danger" onclick="eliminarEmpleado('${empleado.id}')"> <i class="fas fa-trash"></i> </button> </td> </tr> `;});container.innerHTML = html;}renderizarHoras(){const container = document.getElementById('cuerpoHistorialHoras');if(!container)return;let html = '';this.horas.forEach((registro)=>{const horas = registro.horas ||{};html += ` <tr> <td>${registro.fecha}</td> <td>${registro.empleadoNombre}</td> <td>${horas.ordinarias || 0}</td> <td>${horas.recargo_nocturno || 0}</td> <td>${horas.recargo_diurno_dominical || 0}</td> <td>${horas.recargo_nocturno_dominical || 0}</td> <td>${horas.hora_extra_diurna || 0}</td> <td>${horas.hora_extra_nocturna || 0}</td> <td>${horas.hora_diurna_dominical_o_festivo || 0}</td> <td>${horas.hora_extra_diurna_dominical_o_festivo || 0}</td> <td>${horas.hora_nocturna_dominical_o_festivo || 0}</td> <td>${horas.hora_extra_nocturna_dominical_o_festivo || 0}</td> <td>${registro.totalHoras || 0}</td> <td>$${(registro.totalSalario || 0).toLocaleString()}</td> <td> <button class="btn btn-sm btn-outline-info" onclick="verDetalleHoras('${registro.id}')"> <i class="fas fa-eye"></i> </button> </td> </tr> `;});container.innerHTML = html;}renderizarDepartamentos(){console.log('üìã Departamentos cargados:',this.departamentos);}limpiarFormularioHoras(){const form = document.getElementById('formRegistroHoras');if(form){form.reset();}}mostrarModalCalculoHoras(){const modal = document.getElementById('modalCalculoHoras');if(modal){modal.style.display = 'block';}}cerrarModalCalculoHoras(){const modal = document.getElementById('modalCalculoHoras');if(modal){modal.style.display = 'none';}}mostrarModalPrevisualizacion(html){const modal = document.getElementById('modalPrevisualizacion');if(!modal)return;const contenido = modal.querySelector('.modal-body');contenido.innerHTML = html;modal.style.display = 'block';}cerrarModalPrevisualizacion(){const modal = document.getElementById('modalPrevisualizacion');if(modal){modal.style.display = 'none';}}mostrarNotificacion(mensaje,tipo = 'info'){if(typeof mostrarNotificacionProfesional === 'function'){mostrarNotificacionProfesional(mensaje,tipo);}else if(typeof mostrarNotificacion === 'function'){mostrarNotificacion(mensaje,tipo);}else{alert(mensaje);}}getCurrentUserId(){if(typeof firebase !== 'undefined' && firebase.auth().currentUser){return firebase.auth().currentUser.uid;}return localStorage.getItem('currentUserId')|| 'default';}verDetalleHoras(registroId){try{const registro = this.horas.find((h)=> h.id === registroId);if(!registro){this.mostrarNotificacion('Registro de horas no encontrado','error');return;}const horas = registro.horas ||{};const salarios = registro.salarios ||{};let html = ` <div class="detalle-horas-container"> <h4>Detalle de Horas - ${registro.empleadoNombre}</h4> <p><strong>Fecha:</strong> ${registro.fecha}</p> <div class="detalle-horas-grid"> <div class="detalle-hora-item"> <span class="tipo-hora">Horas Ordinarias</span> <span class="horas-cantidad">${horas.ordinarias || 0}hrs</span> <span class="salario-valor">$${(salarios.ordinarias || 0).toLocaleString()}</span> </div> <div class="detalle-hora-item"> <span class="tipo-hora">Recargo Nocturno</span> <span class="horas-cantidad">${horas.recargo_nocturno || 0}hrs</span> <span class="salario-valor">$${(salarios.recargo_nocturno || 0).toLocaleString()}</span> </div> <div class="detalle-hora-item"> <span class="tipo-hora">Recargo Diurno Dominical</span> <span class="horas-cantidad">${horas.recargo_diurno_dominical || 0}hrs</span> <span class="salario-valor">$${(salarios.recargo_diurno_dominical || 0).toLocaleString()}</span> </div> <div class="detalle-hora-item"> <span class="tipo-hora">Recargo Nocturno Dominical</span> <span class="horas-cantidad">${horas.recargo_nocturno_dominical || 0}hrs</span> <span class="salario-valor">$${(salarios.recargo_nocturno_dominical || 0).toLocaleString()}</span> </div> <div class="detalle-hora-item"> <span class="tipo-hora">Hora Extra Diurna</span> <span class="horas-cantidad">${horas.hora_extra_diurna || 0}hrs</span> <span class="salario-valor">$${(salarios.hora_extra_diurna || 0).toLocaleString()}</span> </div> <div class="detalle-hora-item"> <span class="tipo-hora">Hora Extra Nocturna</span> <span class="horas-cantidad">${horas.hora_extra_nocturna || 0}hrs</span> <span class="salario-valor">$${(salarios.hora_extra_nocturna || 0).toLocaleString()}</span> </div> <div class="detalle-hora-item"> <span class="tipo-hora">Hora Diurna Dominical/Festivo</span> <span class="horas-cantidad">${horas.hora_diurna_dominical_o_festivo || 0}hrs</span> <span class="salario-valor">$${(salarios.hora_diurna_dominical_o_festivo || 0).toLocaleString()}</span> </div> <div class="detalle-hora-item"> <span class="tipo-hora">Hora Extra Diurna Dominical/Festivo</span> <span class="horas-cantidad">${horas.hora_extra_diurna_dominical_o_festivo || 0}hrs</span> <span class="salario-valor">$${(salarios.hora_extra_diurna_dominical_o_festivo || 0).toLocaleString()}</span> </div> <div class="detalle-hora-item"> <span class="tipo-hora">Hora Nocturna Dominical/Festivo</span> <span class="horas-cantidad">${horas.hora_nocturna_dominical_o_festivo || 0}hrs</span> <span class="salario-valor">$${(salarios.hora_nocturna_dominical_o_festivo || 0).toLocaleString()}</span> </div> <div class="detalle-hora-item"> <span class="tipo-hora">Hora Extra Nocturna Dominical/Festivo</span> <span class="horas-cantidad">${horas.hora_extra_nocturna_dominical_o_festivo || 0}hrs</span> <span class="salario-valor">$${(salarios.hora_extra_nocturna_dominical_o_festivo || 0).toLocaleString()}</span> </div> </div> <div class="detalle-total"> <strong>Total Horas:${registro.totalHoras || 0}</strong> <strong>Total Salario:$${(registro.totalSalario || 0).toLocaleString()}</strong> </div> </div> `;this.mostrarModalDetalleHoras(html);}catch(error){console.error('‚ùå Error al mostrar detalle de horas:',error);this.mostrarNotificacion('Error al mostrar detalle de horas','error');}}mostrarModalDetalleHoras(html){let modal = document.getElementById('modalDetalleHoras');if(!modal){modal = document.createElement('div');modal.id = 'modalDetalleHoras';modal.className = 'modal';modal.innerHTML = ` <div class="modal-content"> <div class="modal-header"> <h4>Detalle de Horas</h4> <button class="modal-close" onclick="gestionPersonal.cerrarModalDetalleHoras()">&times;</button> </div> <div class="modal-body"></div> </div> `;document.body.appendChild(modal);}const modalBody = modal.querySelector('.modal-body');modalBody.innerHTML = html;modal.style.display = 'block';}cerrarModalDetalleHoras(){const modal = document.getElementById('modalDetalleHoras');if(modal){modal.style.display = 'none';}}actualizarEstadisticas(){try{const totalEmpleados = this.empleados.length;const empleadosActivos = this.empleados.filter((emp)=> emp.estado === 'activo').length;const mesActual = new Date().getMonth();const anioActual = new Date().getFullYear();const horasMes = this.horas .filter((hora)=>{const fechaHora = new Date(hora.fecha);return fechaHora.getMonth()=== mesActual && fechaHora.getFullYear()=== anioActual;}).reduce((total,hora)=>{return total + this.calcularTotalHoras(hora);},0);let totalPagos = 0;let promedioSalario = 0;this.empleados.forEach((empleado)=>{if(empleado.estado === 'activo'){if(empleado.tipoSalario === 'fijo'){totalPagos += empleado.salarioTotal || empleado.salarioFijo || 0;}else if(empleado.tipoSalario === 'por_horas'){const horasEmpleado = this.horas.filter((hora)=>{const fechaHora = new Date(hora.fecha);return(fechaHora.getMonth()=== mesActual && fechaHora.getFullYear()=== anioActual && hora.empleadoId === empleado.id);});const salarioEmpleado = this.calcularSalarioPorHoras(empleado,horasEmpleado);totalPagos += salarioEmpleado;}}});if(empleadosActivos > 0){promedioSalario = totalPagos / empleadosActivos;}const promedioHoras = empleadosActivos > 0 ? horasMes / empleadosActivos:0;const diasTrabajados = Math.ceil(horasMes / 8);const elementos ={totalEmpleados:totalEmpleados,horasMes:horasMes.toFixed(1),totalPagos:this.formatearMoneda(totalPagos),nominasGeneradas:this.calcularNominasGeneradas(),promedioHoras:promedioHoras.toFixed(1),promedioSalario:this.formatearMoneda(promedioSalario),empleadosActivos:empleadosActivos,diasTrabajados:diasTrabajados,};Object.entries(elementos).forEach(([id,valor])=>{const elemento = document.getElementById(id);if(elemento){elemento.textContent = valor;}});console.log('‚úÖ Estad√≠sticas actualizadas:',elementos);}catch(error){console.error('‚ùå Error al actualizar estad√≠sticas:',error);}}calcularTotalHoras(registroHoras){let total = 0;Object.keys(registroHoras).forEach((key)=>{if(key.startsWith('horas_')&& typeof registroHoras[key] === 'number'){total += registroHoras[key];}});return total;}calcularSalarioPorHoras(empleado,horasRegistradas){let salarioTotal = 0;horasRegistradas.forEach((registro)=>{if(registro.horas_ordinarias){salarioTotal += registro.horas_ordinarias * empleado.valorHoraOrdinaria;}if(registro.horas_hora_extra_diurna){salarioTotal += registro.horas_hora_extra_diurna * empleado.valorHoraExtraDiurna;}if(registro.horas_recargo_nocturno){salarioTotal += registro.horas_recargo_nocturno *(empleado.valorHoraOrdinaria * 1.35);}if(registro.horas_recargo_diurno_dominical){salarioTotal += registro.horas_recargo_diurno_dominical *(empleado.valorHoraOrdinaria * 1.75);}const otrasHoras = [ 'horas_recargo_nocturno_dominical','horas_hora_extra_nocturna','horas_hora_diurna_dominical_o_festivo','horas_hora_extra_diurna_dominical_o_festivo','horas_hora_nocturna_dominical_o_festivo','horas_hora_extra_nocturna_dominical_o_festivo',];otrasHoras.forEach((tipoHora)=>{if(registro[tipoHora]){let multiplicador = 1;if(tipoHora.includes('extra'))multiplicador *= 1.25;if(tipoHora.includes('nocturna'))multiplicador *= 1.35;if(tipoHora.includes('dominical')|| tipoHora.includes('festivo'))multiplicador *= 1.75;salarioTotal += registro[tipoHora] *(empleado.valorHoraOrdinaria * multiplicador);}});});return salarioTotal;}formatearMoneda(valor){return new Intl.NumberFormat('es-CO',{style:'currency',currency:'COP',minimumFractionDigits:0,maximumFractionDigits:0,}).format(valor);}calcularNominasGeneradas(){return this.empleados.filter((emp)=> emp.estado === 'activo').length;}mostrarModalGenerarNomina(){const modal = document.getElementById('modalGenerarNomina');if(modal){modal.style.display = 'block';}}cerrarModalGenerarNomina(){const modal = document.getElementById('modalGenerarNomina');if(modal){modal.style.display = 'none';}}async exportarNominasExcel(){try{this.mostrarNotificacion('Exportaci√≥n de n√≥minas a Excel implementada','success');}catch(error){console.error('‚ùå Error al exportar n√≥minas a Excel:',error);this.mostrarNotificacion('Error al exportar n√≥minas a Excel','error');}}async generarReporteNominas(){try{this.mostrarNotificacion('Reporte de n√≥minas generado correctamente','success');}catch(error){console.error('‚ùå Error al generar reporte de n√≥minas:',error);this.mostrarNotificacion('Error al generar reporte de n√≥minas','error');}}async agregarEmpleado(empleado){try{this.empleados.push(empleado);if(this.firebaseSyncManager){await this.firebaseSyncManager.syncEmpleados(this.empleados);}else{localStorage.setItem('empleados',JSON.stringify(this.empleados));}console.log('‚úÖ Empleado agregado:',empleado);return empleado;}catch(error){console.error('‚ùå Error al agregar empleado:',error);throw error;}}async agregarDepartamento(departamento){try{this.departamentos.push(departamento);if(this.firebaseSyncManager){await this.firebaseSyncManager.syncDepartamentos(this.departamentos);}else{localStorage.setItem('departamentos',JSON.stringify(this.departamentos));}console.log('‚úÖ Departamento agregado:',departamento);return departamento;}catch(error){console.error('‚ùå Error al agregar departamento:',error);throw error;}}renderizarListaDepartamentos(){const container = document.getElementById('listaDepartamentos');const mensajeNoData = document.getElementById('mensajeNoDepartamentos');if(!container)return;container.innerHTML = '';if(this.departamentos.length === 0){if(mensajeNoData)mensajeNoData.style.display = 'block';return;}if(mensajeNoData)mensajeNoData.style.display = 'none';this.departamentos.forEach((departamento)=>{const departamentoElement = document.createElement('div');departamentoElement.className = 'departamento-item';departamentoElement.innerHTML = ` <div class="departamento-header"> <div class="departamento-color" style="background-color:${departamento.color}"></div> <div class="departamento-nombre">${departamento.nombre || 'Sin nombre'}</div> </div> <div class="departamento-descripcion">${departamento.descripcion || 'Sin descripci√≥n'}</div> <div class="departamento-actions"> <button class="btn btn-small btn-danger" onclick="eliminarDepartamento('${departamento.id}')"> <i class="fas fa-trash"></i> Eliminar </button> </div> `;container.appendChild(departamentoElement);});}}document.addEventListener('DOMContentLoaded',()=>{try{window.gestionPersonal = new GestionPersonalManager();console.log('‚úÖ M√≥dulo de Gesti√≥n de Personal cargado correctamente');}catch(error){console.error('‚ùå Error al cargar m√≥dulo de Gesti√≥n de Personal:',error);}});window.mostrarModalEmpleado =(empleado = null)=>{if(window.gestionPersonal){window.gestionPersonal.mostrarModalEmpleado(empleado);}};window.cerrarModalEmpleado =()=>{if(window.gestionPersonal){window.gestionPersonal.cerrarModalEmpleado();}};window.mostrarModalDepartamento =(departamento = null)=>{if(window.gestionPersonal){window.gestionPersonal.mostrarModalDepartamento(departamento);}};window.cerrarModalDepartamento =()=>{if(window.gestionPersonal){window.gestionPersonal.cerrarModalDepartamento();}};window.cerrarModalCalculoHoras =()=>{if(window.gestionPersonal){window.gestionPersonal.cerrarModalCalculoHoras();}};window.cerrarModalPrevisualizacion =()=>{if(window.gestionPersonal){window.gestionPersonal.cerrarModalPrevisualizacion();}};window.cerrarModalDetalleHoras =()=>{if(window.gestionPersonal){window.gestionPersonal.cerrarModalDetalleHoras();}};window.cambiarTab =(tabName)=>{if(window.gestionPersonal){window.gestionPersonal.cambiarTab(tabName);}};window.mostrarModalRegistroHoras =()=>{if(window.gestionPersonal){window.gestionPersonal.mostrarModalRegistroHoras();}};window.mostrarModalCalculoHoras =()=>{if(window.gestionPersonal){window.gestionPersonal.mostrarModalCalculoHoras();}};window.exportarHorasExcel =()=>{if(window.gestionPersonal){window.gestionPersonal.exportarHorasExcel();}};window.generarReporteHoras =()=>{if(window.gestionPersonal){window.gestionPersonal.generarReporteHoras();}};window.exportarEmpleadosExcel =()=>{if(window.gestionPersonal){window.gestionPersonal.exportarEmpleadosExcel();}};window.gestionarDepartamentos =()=>{if(window.gestionPersonal){window.gestionPersonal.gestionarDepartamentos();}};window.generarReporteGeneral =()=>{if(window.gestionPersonal){window.gestionPersonal.generarReporteGeneral();}};window.generarReporteEmpleado =()=>{if(window.gestionPersonal){window.gestionPersonal.generarReporteHoras();}};window.generarReporteDepartamento =()=>{if(window.gestionPersonal){window.gestionPersonal.generarReporteDepartamento();}};window.mostrarModalGenerarNomina =()=>{if(window.gestionPersonal){window.gestionPersonal.mostrarModalGenerarNomina();}};window.cerrarModalGenerarNomina =()=>{if(window.gestionPersonal){window.gestionPersonal.cerrarModalGenerarNomina();}};window.exportarNominasExcel =()=>{if(window.gestionPersonal){window.gestionPersonal.exportarNominasExcel();}};window.generarReporteNominas =()=>{if(window.gestionPersonal){window.gestionPersonal.generarReporteNominas();}};window.limpiarFormularioHoras =()=>{if(window.gestionPersonal){window.gestionPersonal.limpiarFormularioHoras();}};window.mostrarNotificacion =(mensaje,tipo = 'info')=>{try{if(typeof AxyraNotificationSystem !== 'undefined' && window.axyraNotifications){window.axyraNotifications.showNotification(mensaje,tipo);}else{alert(`${tipo.toUpperCase()}:${mensaje}`);}}catch(error){console.error('‚ùå Error al mostrar notificaci√≥n:',error);alert(`${tipo.toUpperCase()}:${mensaje}`);}};window.eliminarEmpleado =(empleadoId)=>{if(window.gestionPersonal){window.gestionPersonal.eliminarEmpleado(empleadoId);}};window.verDetalleHoras =(registroId)=>{if(window.gestionPersonal){window.gestionPersonal.verDetalleHoras(registroId);}};window.mostrarModalRegistroHoras =()=>{const modal = document.getElementById('modalRegistroHoras');if(modal){modal.style.display = 'block';}};window.cerrarModalRegistroHoras =()=>{const modal = document.getElementById('modalRegistroHoras');if(modal){modal.style.display = 'none';}};window.mostrarModalCalculoHoras =()=>{const modal = document.getElementById('modalCalculoHoras');if(modal){const empleadoSelect = document.getElementById('empleadoHoras');const fechaInput = document.getElementById('fechaHoras');if(empleadoSelect && fechaInput){const empleado = empleadoSelect.options[empleadoSelect.selectedIndex];const fecha = fechaInput.value;document.getElementById('calculoEmpleado').textContent = empleado.text || 'No seleccionado';document.getElementById('calculoFecha').textContent = fecha || 'No ingresada';const horasInputs = document.querySelectorAll('input[id^="horas_"]');let totalHoras = 0;horasInputs.forEach((input)=>{totalHoras += parseFloat(input.value)|| 0;});document.getElementById('calculoTotalHoras').textContent = totalHoras;}modal.style.display = 'block';}};window.cerrarModalCalculoHoras =()=>{const modal = document.getElementById('modalCalculoHoras');if(modal){modal.style.display = 'none';}};window.mostrarModalExportarExcel =()=>{const modal = document.getElementById('modalExportarExcel');if(modal){const hoy = new Date();const inicioMes = new Date(hoy.getFullYear(),hoy.getMonth(),1);document.getElementById('exportFechaInicio').value = inicioMes.toISOString().split('T')[0];document.getElementById('exportFechaFin').value = hoy.toISOString().split('T')[0];modal.style.display = 'block';}};window.cerrarModalExportarExcel =()=>{const modal = document.getElementById('modalExportarExcel');if(modal){modal.style.display = 'none';}};window.mostrarModalReporteHoras =()=>{const modal = document.getElementById('modalReporteHoras');if(modal){const periodoSelect = document.getElementById('reportePeriodo');const fechasPersonalizadas = document.getElementById('fechasPersonalizadas');if(periodoSelect && fechasPersonalizadas){periodoSelect.addEventListener('change',()=>{if(periodoSelect.value === 'personalizado'){fechasPersonalizadas.style.display = 'block';}else{fechasPersonalizadas.style.display = 'none';}});}modal.style.display = 'block';}};window.cerrarModalReporteHoras =()=>{const modal = document.getElementById('modalReporteHoras');if(modal){modal.style.display = 'none';}};window.mostrarModalGenerarNomina =()=>{const modal = document.getElementById('modalGenerarNomina');if(modal){const hoy = new Date();const inicioMes = new Date(hoy.getFullYear(),hoy.getMonth(),1);const finMes = new Date(hoy.getFullYear(),hoy.getMonth()+ 1,0);document.getElementById('nominaFechaInicio').value = inicioMes.toISOString().split('T')[0];document.getElementById('nominaFechaFin').value = finMes.toISOString().split('T')[0];modal.style.display = 'block';}};window.cerrarModalGenerarNomina =()=>{const modal = document.getElementById('modalGenerarNomina');if(modal){modal.style.display = 'none';}};window.procesarExportacion =()=>{const tipoExportacion = document.querySelector('input[name="exportType"]:checked').value;const fechaInicio = document.getElementById('exportFechaInicio').value;const fechaFin = document.getElementById('exportFechaFin').value;if(!fechaInicio || !fechaFin){window.mostrarNotificacion('Por favor complete las fechas de exportaci√≥n','warning');return;}window.mostrarNotificacion(`Exportando ${tipoExportacion}del ${fechaInicio}al ${fechaFin}`,'success');window.cerrarModalExportarExcel();};window.generarReporteHoras =()=>{const periodo = document.getElementById('reportePeriodo').value;const departamento = document.getElementById('reporteDepartamento').value;let mensaje = `Generando reporte de horas para ${periodo}`;if(departamento){mensaje += ` del departamento ${departamento}`;}window.mostrarNotificacion(mensaje,'success');window.cerrarModalReporteHoras();};window.procesarGeneracionNomina =()=>{const periodo = document.getElementById('nominaPeriodo').value;const fechaInicio = document.getElementById('nominaFechaInicio').value;const fechaFin = document.getElementById('nominaFechaFin').value;const departamento = document.getElementById('nominaDepartamento').value;if(!fechaInicio || !fechaFin){window.mostrarNotificacion('Por favor complete las fechas de la n√≥mina','warning');return;}let mensaje = `Generando n√≥mina ${periodo}del ${fechaInicio}al ${fechaFin}`;if(departamento){mensaje += ` para el departamento ${departamento}`;}window.mostrarNotificacion(mensaje,'success');window.cerrarModalGenerarNomina();};window.mostrarModalEmpleado =()=>{const modal = document.getElementById('modalEmpleado');if(modal){const selectorDepartamento = document.getElementById('departamentoEmpleado');if(selectorDepartamento){selectorDepartamento.innerHTML = '<option value="">Seleccionar departamento</option>';window.gestionPersonal.departamentos.forEach((departamento)=>{const option = document.createElement('option');option.value = departamento.nombre;option.textContent = departamento.nombre;selectorDepartamento.appendChild(option);});}const fechaInput = document.getElementById('fechaContratacionEmpleado');if(fechaInput){fechaInput.value = new Date().toISOString().split('T')[0];}modal.style.display = 'block';}};window.cerrarModalEmpleado =()=>{const modal = document.getElementById('modalEmpleado');if(modal){modal.style.display = 'none';document.getElementById('formEmpleado').reset();}};window.mostrarModalDepartamento =()=>{const modal = document.getElementById('modalDepartamento');if(modal){window.gestionPersonal.renderizarListaDepartamentos();const colorInput = document.getElementById('colorDepartamento');const colorPreview = document.getElementById('colorPreview');if(colorInput && colorPreview){colorPreview.style.backgroundColor = colorInput.value;colorInput.addEventListener('input',(e)=>{colorPreview.style.backgroundColor = e.target.value;});colorPreview.addEventListener('click',()=>{colorInput.click();});}modal.style.display = 'block';}};window.cerrarModalDepartamento =()=>{const modal = document.getElementById('modalDepartamento');if(modal){modal.style.display = 'none';document.getElementById('formDepartamento').reset();}};window.mostrarModalExportarEmpleados =()=>{const modal = document.getElementById('modalExportarEmpleados');if(modal){const selectorDepartamento = document.getElementById('exportDepartamentoEmpleados');if(selectorDepartamento){selectorDepartamento.innerHTML = '<option value="">Todos los Departamentos</option>';window.gestionPersonal.departamentos.forEach((departamento)=>{const option = document.createElement('option');option.value = departamento.nombre;option.textContent = departamento.nombre;selectorDepartamento.appendChild(option);});}modal.style.display = 'block';}};window.cerrarModalExportarEmpleados =()=>{const modal = document.getElementById('modalExportarEmpleados');if(modal){modal.style.display = 'none';}};window.guardarEmpleado = async()=>{try{const form = document.getElementById('formEmpleado');if(!form.checkValidity()){form.reportValidity();return;}const tipoSalario = document.getElementById('tipoSalarioEmpleado').value;if(tipoSalario === 'fijo'){const salarioFijo = limpiarFormatoSalario(document.getElementById('salarioFijoEmpleado'));if(!salarioFijo || parseFloat(salarioFijo)<= 0){window.mostrarNotificacion('Por favor ingrese un salario fijo v√°lido','warning');return;}}else if(tipoSalario === 'por_horas'){const salarioReferencia = limpiarFormatoSalario(document.getElementById('salarioReferenciaEmpleado'));if(!salarioReferencia || parseFloat(salarioReferencia)<= 0){window.mostrarNotificacion('Por favor ingrese un salario de referencia v√°lido','warning');return;}}const empleado ={id:Date.now().toString(),nombre:document.getElementById('nombreEmpleado').value,cedula:document.getElementById('cedulaEmpleado').value,cargo:document.getElementById('cargoEmpleado').value,departamento:document.getElementById('departamentoEmpleado').value,tipoContrato:document.getElementById('tipoContratoEmpleado').value,fechaContratacion:document.getElementById('fechaContratacionEmpleado').value,estado:document.getElementById('estadoEmpleado').value,tipoSalario:tipoSalario,};if(tipoSalario === 'fijo'){empleado.salarioFijo = parseFloat(limpiarFormatoSalario(document.getElementById('salarioFijoEmpleado')));empleado.bonificaciones = parseFloat(limpiarFormatoSalario(document.getElementById('bonificacionesEmpleado')))|| 0;empleado.salarioTotal = empleado.salarioFijo + empleado.bonificaciones;empleado.salarioBase = empleado.salarioTotal;}else if(tipoSalario === 'por_horas'){empleado.salarioReferencia = parseFloat(limpiarFormatoSalario(document.getElementById('salarioReferenciaEmpleado')));empleado.salarioBase = empleado.salarioReferencia;}const cedulaExistente = window.gestionPersonal.empleados.find((emp)=> emp.cedula === empleado.cedula);if(cedulaExistente){window.mostrarNotificacion('Ya existe un empleado con esta c√©dula','error');return;}await window.gestionPersonal.agregarEmpleado(empleado);window.mostrarNotificacion('Empleado agregado correctamente','success');window.cerrarModalEmpleado();window.gestionPersonal.renderizarEmpleados();window.gestionPersonal.actualizarEstadisticas();}catch(error){console.error('‚ùå Error al guardar empleado:',error);window.mostrarNotificacion('Error al guardar empleado','error');}};window.guardarDepartamento = async()=>{try{const form = document.getElementById('formDepartamento');if(!form.checkValidity()){form.reportValidity();return;}const departamento ={id:Date.now().toString(),nombre:document.getElementById('nombreDepartamento').value,descripcion:document.getElementById('descripcionDepartamento').value || '',color:document.getElementById('colorDepartamento').value,};const nombreExistente = window.gestionPersonal.departamentos.find((dep)=> dep.nombre === departamento.nombre);if(nombreExistente){window.mostrarNotificacion('Ya existe un departamento con este nombre','error');return;}await window.gestionPersonal.agregarDepartamento(departamento);window.mostrarNotificacion('Departamento agregado correctamente','success');form.reset();window.gestionPersonal.renderizarListaDepartamentos();window.gestionPersonal.llenarSelectorDepartamentos();}catch(error){console.error('‚ùå Error al guardar departamento:',error);window.mostrarNotificacion('Error al guardar departamento','error');}};window.procesarExportacionEmpleados =()=>{try{const estado = document.getElementById('exportEstadoEmpleados').value;const departamento = document.getElementById('exportDepartamentoEmpleados').value;const infoPersonal = document.getElementById('exportInfoPersonal').checked;const infoLaboral = document.getElementById('exportInfoLaboral').checked;const salarios = document.getElementById('exportSalarios').checked;const historial = document.getElementById('exportHistorial').checked;let mensaje = 'Exportando empleados con filtros:';if(estado)mensaje += ` Estado:${estado}`;if(departamento)mensaje += `,Departamento:${departamento}`;mensaje += `,Informaci√≥n:${infoPersonal ? 'Personal':''}${infoLaboral ? ' Laboral':''}${salarios ? ' Salarios':''}${historial ? ' Historial':''}`;window.mostrarNotificacion(mensaje,'success');window.cerrarModalExportarEmpleados();console.log('üìä Exportando empleados con configuraci√≥n:',{estado,departamento,infoPersonal,infoLaboral,salarios,historial,});}catch(error){console.error('‚ùå Error al procesar exportaci√≥n:',error);window.mostrarNotificacion('Error al procesar exportaci√≥n','error');}};document.addEventListener('DOMContentLoaded',()=>{const modales = document.querySelectorAll('.modal-overlay');modales.forEach((modal)=>{modal.addEventListener('click',(e)=>{if(e.target === modal){modal.style.display = 'none';}});});});window.eliminarDepartamento = async(departamentoId)=>{try{if(confirm('¬øEst√° seguro de que desea eliminar este departamento? Esta acci√≥n no se puede deshacer.')){await window.gestionPersonal.eliminarDepartamento(departamentoId);window.mostrarNotificacion('Departamento eliminado correctamente','success');}}catch(error){console.error('‚ùå Error al eliminar departamento:',error);window.mostrarNotificacion(error.message || 'Error al eliminar departamento','error');}};window.mostrarModalReporteGeneral =()=>{const modal = document.getElementById('modalReporteGeneral');if(modal){const periodoSelect = document.getElementById('reporteGeneralPeriodo');const fechasPersonalizadas = document.getElementById('fechasReporteGeneral');if(periodoSelect && fechasPersonalizadas){periodoSelect.addEventListener('change',()=>{if(periodoSelect.value === 'personalizado'){fechasPersonalizadas.style.display = 'block';}else{fechasPersonalizadas.style.display = 'none';}});}modal.style.display = 'block';}};window.cerrarModalReporteGeneral =()=>{const modal = document.getElementById('modalReporteGeneral');if(modal){modal.style.display = 'none';}};window.mostrarModalReporteEmpleado =()=>{const modal = document.getElementById('modalReporteEmpleado');if(modal){const selectorEmpleado = document.getElementById('reporteEmpleadoSelect');if(selectorEmpleado){selectorEmpleado.innerHTML = '<option value="">Seleccionar empleado</option>';window.gestionPersonal.empleados .filter((emp)=> emp.estado === 'activo').forEach((empleado)=>{const option = document.createElement('option');option.value = empleado.id;option.textContent = `${empleado.nombre}- ${empleado.cargo}`;selectorEmpleado.appendChild(option);});}const periodoSelect = document.getElementById('reporteEmpleadoPeriodo');const fechasPersonalizadas = document.getElementById('fechasReporteEmpleado');if(periodoSelect && fechasPersonalizadas){periodoSelect.addEventListener('change',()=>{if(periodoSelect.value === 'personalizado'){fechasPersonalizadas.style.display = 'block';}else{fechasPersonalizadas.style.display = 'none';}});}modal.style.display = 'block';}};window.cerrarModalReporteEmpleado =()=>{const modal = document.getElementById('modalReporteEmpleado');if(modal){modal.style.display = 'none';}};window.mostrarModalReporteDepartamento =()=>{const modal = document.getElementById('modalReporteDepartamento');if(modal){const selectorDepartamento = document.getElementById('reporteDepartamentoSelect');if(selectorDepartamento){selectorDepartamento.innerHTML = '<option value="">Todos los Departamentos</option>';window.gestionPersonal.departamentos.forEach((departamento)=>{const option = document.createElement('option');option.value = departamento.nombre;option.textContent = departamento.nombre;selectorDepartamento.appendChild(option);});}const periodoSelect = document.getElementById('reporteDepartamentoPeriodo');const fechasPersonalizadas = document.getElementById('fechasReporteDepartamento');if(periodoSelect && fechasPersonalizadas){periodoSelect.addEventListener('change',()=>{if(periodoSelect.value === 'personalizado'){fechasPersonalizadas.style.display = 'block';}else{fechasPersonalizadas.style.display = 'none';}});}modal.style.display = 'block';}};window.cerrarModalReporteDepartamento =()=>{const modal = document.getElementById('modalReporteDepartamento');if(modal){modal.style.display = 'none';}};window.cambiarTipoSalario =()=>{const tipoSalario = document.getElementById('tipoSalarioEmpleado').value;const camposFijo = document.getElementById('camposSalarioFijo');const camposHoras = document.getElementById('camposSalarioHoras');if(camposFijo)camposFijo.style.display = 'none';if(camposHoras)camposHoras.style.display = 'none';if(tipoSalario === 'fijo'){if(camposFijo)camposFijo.style.display = 'grid';}else if(tipoSalario === 'por_horas'){if(camposHoras)camposHoras.style.display = 'grid';}};window.formatearSalario =(input)=>{let valor = input.value.replace(/[^\d]/g,'');if(valor.length > 0){valor = parseInt(valor).toLocaleString('es-CO');}input.value = valor;};window.limpiarFormatoSalario =(input)=>{return input.value.replace(/[^\d]/g,'');};document.addEventListener('DOMContentLoaded',()=>{const camposSalario = [ 'salarioFijoEmpleado','bonificacionesEmpleado','salarioReferenciaEmpleado' ];camposSalario.forEach(id =>{const campo = document.getElementById(id);if(campo){campo.addEventListener('input',(e)=>{formatearSalario(e.target);});campo.addEventListener('blur',(e)=>{formatearSalario(e.target);});campo.addEventListener('focus',(e)=>{e.target.value = e.target.value.replace(/[^\d]/g,'');});}});});